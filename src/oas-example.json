{
	"basePath": "/elements/api-v2",
	"paths": {
	  "/agents": {
		"post": {
		  "summary": "Creates a user that can create an incident.",
		  "operationId": "createAgent",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/ContactPostResp"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/User"
			  },
			  "in": "body",
			  "name": "agent",
			  "description": "The agents information",
			  "required": true
			}
		  ],
		  "tags": [
			"Agents"
		  ]
		},
		"get": {
		  "summary": "Gets a list of user whom the incidents are assigned to.",
		  "operationId": "getAgents",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Agent"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. Supported fields are projectKeys, query, username, accountId. Operators are not supported. For example, to search for a an agent with an accountId, the search expression will be where=accountId='value'.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted attachments should be included in the search.",
			  "type": "boolean",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Agents"
		  ]
		}
	  },
	  "/agents/{id}": {
		"get": {
		  "summary": "Gets a user whom the incidents are assigned to.",
		  "operationId": "getAgentById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/ContactGetById"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the agent",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted attachments should be included in the search.",
			  "type": "boolean",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Agents"
		  ]
		},
		"delete": {
		  "summary": "Deletes a user that can create an incident.",
		  "operationId": "deleteAgentById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The username of the agent.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Agents"
		  ]
		}
	  },
	  "/attachments/{id}": {
		"get": {
		  "summary": "Retrieves a specific attachment associated with an ID from your helpdesk service.The attachment is directly streamed from the helpdesk provider through Cloud Elements, and is not buffered to disk.  Specifying a attachment associated with an ID that does not exist results in an error response.",
		  "operationId": "getAttachmentById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The attachment id.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Attachments"
		  ]
		},
		"delete": {
		  "summary": "Delete an attachment with a given ID from the help desk system. Specifying an attachment associated with a given ID that does not exist will result in an error message.",
		  "operationId": "deleteAttachmentById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the attachment",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Attachments"
		  ]
		}
	  },
	  "/attachments/{id}/metadata": {
		"get": {
		  "summary": "Returns the meta-data of an attachment by the id.",
		  "operationId": "getAttachmentsMetadata",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/attachmentsMetadata"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The attachement id.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Attachments"
		  ]
		}
	  },
	  "/bulk/download": {
		"post": {
		  "summary": "Create a new bulk download job (asynchronous)",
		  "operationId": "createBulkDownload",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/BulkQuery"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/bulkDownloadRequest"
			  },
			  "in": "body",
			  "name": "body",
			  "description": "The object body",
			  "required": true
			}
		  ],
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/jobs": {
		"get": {
		  "operationId": "getBulkJobs",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
			  "in": "query",
			  "name": "where",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The page size for pagination, which defaults to 200 if not supplied",
			  "format": "int64",
			  "in": "query",
			  "name": "pageSize",
			  "required": false,
			  "type": "integer"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/BulkJobList"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Fetch all the bulk jobs for an instance",
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/query": {
		"post": {
		  "summary": "<span class='betaAPI'>beta</span> Create an asynchronous bulk query job.",
		  "produces": [
			"application/json"
		  ],
		  "operationId": "createBulkQuery",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/BulkQuery"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "q",
			  "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "lastRunDate",
			  "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "from",
			  "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "to",
			  "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "continueFromJobId",
			  "description": "If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored",
			  "type": "number",
			  "required": false
			},
			{
			  "in": "formData",
			  "name": "metaData",
			  "description": "Optional JSON MetaData that contains callback-payload, ex: {\"callback-payload\" : <Json> }. callback-payload - is passed back in bulk job notification ",
			  "type": "string",
			  "required": false
			}
		  ],
		  "tags": [
			"Bulk"
		  ],
		  "consumes": [
			"multipart/form-data"
		  ]
		}
	  },
	  "/bulk/{id}/cancel": {
		"put": {
		  "summary": "<span class='betaAPI'>beta</span> Cancel an asynchronous bulk query job.",
		  "produces": [
			"application/json"
		  ],
		  "operationId": "replaceBulkCancel",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/BulkStatus"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the bulk job to cancel.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/{id}/errors": {
		"get": {
		  "operationId": "getBulkErrors",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The ID of the bulk job to retrieve its errors.",
			  "in": "path",
			  "name": "id",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The page size for pagination, which defaults to 200 if not supplied",
			  "format": "int64",
			  "in": "query",
			  "name": "pageSize",
			  "required": false,
			  "type": "integer"
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"items": {
				  "type": "string"
				},
				"type": "array"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Retrieve the errors of a bulk job.",
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/{id}/status": {
		"get": {
		  "summary": "Retrieve the status of a bulk job.",
		  "produces": [
			"application/json"
		  ],
		  "operationId": "getBulkStatus",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/BulkStatus"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the bulk job to retrieve its status.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/{id}/{objectName}": {
		"get": {
		  "summary": "<span class='betaAPI'>beta</span> Retrieve the results of an asynchronous bulk query.",
		  "produces": [
			"application/json",
			"text/csv"
		  ],
		  "operationId": "getBulkByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the bulk job",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Bulk"
		  ]
		}
	  },
	  "/bulk/{objectName}": {
		"post": {
		  "summary": "Upload a file of objects to be bulk uploaded to the provider.",
		  "produces": [
			"application/json"
		  ],
		  "operationId": "createBulkByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object for which data needs to be uploaded.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "identifierFieldName",
			  "description": "The name of the field, which will be used as the ID field for determine inserts v/s updates during the bulk load process.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "formData",
			  "name": "metaData",
			  "description": "Optional JSON MetaData that contains callback-payload, ex: {\"callback-payload\" : <Json> }. callback-payload - is passed back in bulk job notification ",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "formData",
			  "name": "file",
			  "description": "The file of objects to bulk load.",
			  "type": "file",
			  "required": false
			}
		  ],
		  "tags": [
			"Bulk"
		  ],
		  "consumes": [
			"multipart/form-data"
		  ]
		}
	  },
	  "/contacts": {
		"post": {
		  "summary": "Creates a user that can create an incident.",
		  "operationId": "createContact",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/ContactPostResp"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/User"
			  },
			  "in": "body",
			  "name": "contact",
			  "description": "The contacts information",
			  "required": true
			}
		  ],
		  "tags": [
			"Contacts"
		  ]
		},
		"get": {
		  "summary": "Retrieves a list of users that can create an incident.",
		  "operationId": "getContacts",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Contact"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. Supported fields are projectKeys, query, userName, accountId. Operators are not supported. For example, to search for contacts with an accountId, the search expression will be where=accountId='value'.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted attachments should be included in the search.",
			  "type": "boolean",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Contacts"
		  ]
		}
	  },
	  "/contacts/{id}": {
		"get": {
		  "summary": "Retrieves the user that can create an incident.",
		  "operationId": "getContactById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/ContactGetById"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The accountId of the contact.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Contacts"
		  ]
		},
		"delete": {
		  "summary": "Deletes a user that can create an incident.",
		  "operationId": "deleteContactById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The accountId of the contact.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Contacts"
		  ]
		}
	  },
	  "/fields": {
		"post": {
		  "summary": "Create a new field in the help desk system. Field creation will flow through Cloud Elements to the help desk service.",
		  "operationId": "createField",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Field"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/Field"
			  },
			  "in": "body",
			  "name": "field",
			  "description": "The field to create",
			  "required": true
			}
		  ],
		  "tags": [
			"Fields"
		  ]
		},
		"get": {
		  "summary": "Retrieves a list of all fields",
		  "operationId": "getFields",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/FieldsList"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "nextPage",
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Fields"
		  ]
		}
	  },
	  "/groups": {
		"get": {
		  "summary": "Search for groups",
		  "operationId": "getGroups",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/groupsListObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression. For example, <i> query='Admin', exclude='groupName' or exclude in ('group1', 'group2') </i>",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Groups"
		  ]
		}
	  },
	  "/groups/{groupName}": {
		"get": {
		  "summary": "Retrieve a group",
		  "operationId": "getGroupByGroupName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/groups"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "groupName",
			  "description": "The  group name",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Groups"
		  ]
		}
	  },
	  "/incident-types": {
		"post": {
		  "summary": "Create a new incident type in the help desk system. Incident type creation will flow through Cloud Elements to the help desk service. If a Incident type already exists will return an error message.",
		  "operationId": "createIncidentType",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/IncidentType"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/IncidentTypePost"
			  },
			  "in": "body",
			  "name": "incidentType",
			  "description": "The incident type field to create",
			  "required": true
			}
		  ],
		  "tags": [
			"Incident Types"
		  ]
		},
		"get": {
		  "summary": "Search for incident type or incident types in the help desk system",
		  "operationId": "getIncidentTypes",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/IncidentType"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "nextPage",
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incident Types"
		  ]
		}
	  },
	  "/incident-types/{id}": {
		"patch": {
		  "summary": "Update incident type in the help desk system. The update API uses the PATCH HTTP verb, so only those fields provided in the incident type object will be updated, and those fields not provided will be left alone.  Updating incident type  that does not exist will result in an error response.",
		  "operationId": "updateIncidentTypeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/IncidentType"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the incident type",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/IncidentTypePatch"
			  },
			  "in": "body",
			  "name": "incidentType",
			  "description": "The IncidentType, containing only the fields to update",
			  "required": true
			}
		  ],
		  "tags": [
			"Incident Types"
		  ]
		},
		"get": {
		  "summary": "Retrieve Incident type field from the help desk system. Incident type field that does not exist will result in an error response.",
		  "operationId": "getIncidentTypeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/IncidentType"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the incident type",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incident Types"
		  ]
		},
		"delete": {
		  "summary": "Delete incident type field from the help desk system.If the incident type does not exist will result in an error message.",
		  "operationId": "deleteIncidentTypeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the incident type",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incident Types"
		  ]
		}
	  },
	  "/incidents": {
		"post": {
		  "summary": "Create a new incident in the help desk system.  Incident creation will flow through Cloud Elements to the help desk service.  Creating duplicate incidents will return an error message.",
		  "operationId": "createIncident",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/CreateIncidentResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/CreateIncident"
			  },
			  "in": "body",
			  "name": "incident",
			  "description": "The incident to create",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Search for incidents in the help desk system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all incidents whose name contains the word 'bug', the search expression parameter will be where=name='%bug%'.  Performing a search without these parameters will not return any results.  <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
		  "operationId": "getIncidents",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Incident"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for incidents last modified on or after 'Jan 15, 2014', the search expression will be <i>where=updated>='2014-01-15'</i>. Note : [For filtering through customfields, make use of custom field id's which are know by /fields API]. For example, to search for incidents using custom field having name : Rank, id : customfield_10100 , the search expression will be <i>where=customfield_10100 = '1|hzzvw7:'</i>.  When this parameter is omitted, all incidents are returned in a paginated fashion.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted incidents should be included in the search.",
			  "type": "boolean",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "fields",
			  "description": "Specify a comma delimited list of fields.  A comma-separated list of fields to return for each incident, use it to retrieve a subset of fields. Allowed values: <i> &ast;all</i> Returns all fields, <i> &ast;navigable</i> Returns navigable fields. Any incident field prefixed with a minus to exclude.  For example <i>fields=summary,comment</i> which includes only 'summary and comment', or <i>fields=-comment</i> which excludes 'comment' from the incident object.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{id}/notifications": {
		"post": {
		  "summary": "Send an email notification to users connected to the incident in the helpdesk system.",
		  "operationId": "createIncidentNotification",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentNotifResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the incident for which to send the notification from the helpdesk system.",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/incidentNotif"
			  },
			  "in": "body",
			  "name": "notification",
			  "description": "The notification object to be sent.",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{id}/worklogs": {
		"post": {
		  "summary": "Adds a worklog to an issue.\\n\\n",
		  "operationId": "createIncidentWorklog",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentsWorklogsPostRes"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The id ID",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/incidentsWorklogsPostReq"
			  },
			  "in": "body",
			  "name": "body",
			  "description": "The object body",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Get all worklogs of an incident",
		  "operationId": "getIncidentsWorklogs",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/incidentsWorkLogGetResObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The incidents ID",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The maximum number of items to return per page.",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}": {
		"patch": {
		  "summary": "Update an incident associated with a given ID in the help desk system. The update API uses the PATCH HTTP verb, so only those fields provided in the incident object will be updated, and those fields not provided will be left alone.  Updating an incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "updateIncidentByIncidentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/IncidentResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/IncidentPatchRequest"
			  },
			  "in": "body",
			  "name": "incident",
			  "description": "The incident, containing only the fields to update",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Retrieve an incident associated with a given ID from the help desk system.  Specifying an incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "getIncidentByIncidentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/IncidentResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"delete": {
		  "summary": "Delete an incident associated with a given ID from the help desk system.  Specifying an incident associated with a given ID that does not exist will result in an error message.",
		  "operationId": "deleteIncidentByIncidentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/attachments": {
		"post": {
		  "summary": "Upload an attachment to an incident associated with a given ID in the help desk system. Adding an attachment to the incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "createIncidentAttachment",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/jiraattachments"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "fileName",
			  "description": "The name of the file (e.g. myFile.txt)",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "formData",
			  "name": "file",
			  "description": "The file to be uploaded",
			  "type": "file",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "description",
			  "description": "The description for the attachment to associate with the incident",
			  "type": "string",
			  "required": false
			}
		  ],
		  "tags": [
			"Incidents"
		  ],
		  "consumes": [
			"multipart/form-data"
		  ]
		},
		"get": {
		  "summary": "Retrieves a list of attachments associated with the given incident id.",
		  "operationId": "getIncidentsAttachments",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Attachment"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/attachments/{attachmentId}": {
		"get": {
		  "summary": "Retrieves a specific incident attachment associated with an ID from your helpdesk service.The attachment is directly streamed from the helpdesk provider through Cloud Elements, and is not buffered to disk.  Specifying a attachment associated with an ID that does not exist results in an error response.",
		  "operationId": "getIncidentsAttachmentByAttachmentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "attachmentId",
			  "description": "The ID of the attachment",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"delete": {
		  "summary": "Delete a incident attachment associated with a given ID from the help desk system .Specifying a user associated with a given ID that does not exist will result in an error message.",
		  "operationId": "deleteIncidentsAttachmentByAttachmentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "attachmentId",
			  "description": "The ID of the attachment",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/comments": {
		"post": {
		  "summary": "Add a Comment to an Incident in Jira",
		  "operationId": "createIncidentComment",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Comments"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/CreateComments"
			  },
			  "in": "body",
			  "name": "comment",
			  "description": "The comment, containing the fields to add in incident",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Search for comments for an incident in the help desk system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all incident comments whose name contains the word 'escalate', the search expression parameter will be where=name='%escalate%'.  Performing a search without these parameters will return all the comments in paginated list. <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
		  "operationId": "getIncidentsComments",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Comments"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident for the comments to be retrieved",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "expand",
			  "description": "optional flags: renderedBody (provides body rendered in HTML)",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/comments/{commentId}": {
		"patch": {
		  "summary": "To add comments to an incident associated with a given ID in the help desk system.The add comment API uses the PATCH HTTP verb, so only those fields provided in the incident object will be updated, and those fields not provided will be left alone.  Updating an incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "updateIncidentsCommentByCommentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/UpdateComments"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "commentId",
			  "description": "The ID of the comment",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/UpdateComments"
			  },
			  "in": "body",
			  "name": "comment",
			  "description": "The comment, containing the fields to add in incident",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Retrieve an incident comment associated with a given ID from the help desk systemSpecifying an incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "getIncidentsCommentByCommentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Comments"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "commentId",
			  "description": "The ID of the comment",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "expand",
			  "description": "The fields you wish to receive expanded details on.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"delete": {
		  "summary": "Delete a comment with a given ID for the incident associated with a given ID from the help desk system.  Specifying an incident with a specified ID that does not exist or comment with a specified id that does nor exist will result in an error response.",
		  "operationId": "deleteIncidentsCommentByCommentId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "commentId",
			  "description": "The ID of the comment",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/history": {
		"get": {
		  "summary": "List the history for an incident in the help desk system",
		  "operationId": "getIncidentsHistory",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/History"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident for the comments to be retrieved",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/history/{historyId}": {
		"get": {
		  "summary": "Retrieve an incident history associated with a given ID from the help desk system. Specifying an incident with a specified ID that does not exist will result in an error response.",
		  "operationId": "getIncidentsHistoryByHistoryId",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/History"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "historyId",
			  "description": "The ID of the history",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/properties": {
		"get": {
		  "summary": "Returns the keys of all properties for the issue identified by the key or by the id.",
		  "operationId": "getIncidentsProperties",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentsPropertiesList"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The incident id.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/properties/{id}": {
		"get": {
		  "summary": "Returns the value of the property with a given key from the issue identified by the key or by the id.",
		  "operationId": "getIncidentsPropertyById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentsPropertiesGetById"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "Property key for an incident. For example, issue.support.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The incident id.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"delete": {
		  "summary": "Removes the property from the issue identified by the key.",
		  "operationId": "deleteIncidentsPropertyById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "Property key for an incident. For example, issue.support.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The incident id.",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"put": {
		  "summary": "Add a new property for an incident. If the property already exists, then it will be updated.",
		  "operationId": "replaceIncidentsPropertyById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentPropResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "Property key for an incident. For example, issue.support.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The incident id.",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/incidentsPropertiesPut"
			  },
			  "in": "body",
			  "name": "body",
			  "description": "The property value to be created.",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/transitions": {
		"post": {
		  "summary": "Post new transitions on Incident.",
		  "operationId": "createIncidentTransition",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/incidentsTransitions"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/incidentsTransitionsPostReq"
			  },
			  "in": "body",
			  "name": "transitions",
			  "description": "The transitions, containing the fields to add in incident",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Get all transitions of an incident.",
		  "operationId": "getIncidentsTransitions",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/incidentsTransitionsObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident for the transitions to be retrieved",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "expand",
			  "description": "Expand options that include additional transitions details in the response.Ex: expand: 'transitions'",
			  "type": "string",
			  "required": false
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/{objectName}": {
		"post": {
		  "summary": "Create a new incident object of type in Jira.  Object creation will flow through Cloud Elements to Jira.  Creating duplicate objects of type will return an error message.",
		  "operationId": "createIncidentByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident to create a sub object on.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object to create",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"type": "object"
			  },
			  "in": "body",
			  "name": "object",
			  "description": "The object to create",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Search for incident objects in Jira, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all objects whose name equals 'foo', the search expression parameter will be where=name='foo'.  Performing a search without these parameters will return all results.  <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
		  "operationId": "getIncidentByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident to get sub objects for.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the incident object to search, e.g., 'comment'.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects that were last modified on or after 'Jan 28, 2016', the search expression will be <i>where=created_at>'2016-01-28T00:00:00Z'</i>. When this parameter is omitted, all objects of the given type are returned in a paginated fashion.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted objects should be included in the search.",
			  "type": "boolean",
			  "required": false
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/incidents/{incidentId}/{objectName}/{id}": {
		"patch": {
		  "summary": "Update an incident object associated with a given object name and ID in Jira. The update API uses the PATCH HTTP verb, so only those fields provided in the object will be updated, and those fields not provided will be left alone.  Updating an object with a specified ID that does not exist will result in an error response.",
		  "operationId": "updateIncidentsObjectNameById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the object",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object to update",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"type": "object"
			  },
			  "in": "body",
			  "name": "object",
			  "description": "The object, containing only the fields to update",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"get": {
		  "summary": "Retrieve an incident object associated with a given object name and ID from Jira.  Specifying an object associated with a given object name and ID that does not exist will result in an error response.",
		  "operationId": "getIncidentsObjectNameById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the object",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object to retrieve",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		},
		"delete": {
		  "summary": "Delete an incident object associated with a given object name and ID from Jira.  Specifying a lead associated with a given objectName and ID that does not exist will result in an error message.",
		  "operationId": "deleteIncidentsObjectNameById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the object",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "incidentId",
			  "description": "The ID of the incident",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object to delete",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Incidents"
		  ]
		}
	  },
	  "/issuesecurity-schemes": {
		"get": {
		  "summary": "Search for issuesecurity schemes",
		  "operationId": "getIssuesecuritySchemes",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/issuesecuritySchemesGetResponseObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Issuesecurity Schemes"
		  ]
		}
	  },
	  "/issuesecurity-schemes/{id}": {
		"get": {
		  "summary": "Retrieve a issuesecurity scheme ",
		  "operationId": "getIssuesecuritySchemeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/issuesecuritySchemesGetByIdResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  issuesuecurity-scheme ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Issuesecurity Schemes"
		  ]
		}
	  },
	  "/notification-schemes": {
		"get": {
		  "summary": "Search for notification schemes",
		  "operationId": "getNotificationSchemes",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/notificationSchemesGetResponseObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression. For example, <i> expand='all' </i>",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Notification Schemes"
		  ]
		}
	  },
	  "/notification-schemes/{id}": {
		"get": {
		  "summary": "Retrieve a notification scheme",
		  "operationId": "getNotificationSchemeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/notificationSchemesGetByIdResponse"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  notification-schemes ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Notification Schemes"
		  ]
		}
	  },
	  "/objects": {
		"get": {
		  "operationId": "getObjects",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
			  "in": "header",
			  "name": "Elements-Version",
			  "required": false,
			  "type": "string",
			  "enum": [
				"Hydrogen",
				"Helium"
			  ]
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"items": {
				  "type": "string"
				},
				"type": "array"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Get a list of all the available objects.",
		  "tags": [
			"Objects"
		  ]
		}
	  },
	  "/objects/{objectName}/docs": {
		"get": {
		  "operationId": "getObjectsObjectNameDocs",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "Include discovery metadata in definitions",
			  "in": "query",
			  "name": "discovery",
			  "required": false,
			  "type": "boolean"
			},
			{
			  "description": "Optionally resolve swagger references for an inline object definition",
			  "in": "query",
			  "name": "resolveReferences",
			  "required": false,
			  "type": "boolean"
			},
			{
			  "description": "Include only OpenAPI / Swagger properties in definitions",
			  "in": "query",
			  "name": "basic",
			  "required": false,
			  "type": "boolean"
			},
			{
			  "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
			  "in": "query",
			  "name": "version",
			  "required": false,
			  "default": "-1",
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/swaggerDocs"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Get swagger docs for an object.",
		  "tags": [
			"Objects"
		  ]
		}
	  },
	  "/objects/{objectName}/metadata": {
		"get": {
		  "operationId": "getObjectsObjectNameMetadata",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
			  "in": "header",
			  "name": "Elements-Version",
			  "required": false,
			  "type": "string",
			  "enum": [
				"Hydrogen",
				"Helium"
			  ]
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/objectsMetadata"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Get a list of all the field for an object.",
		  "tags": [
			"Objects"
		  ]
		}
	  },
	  "/permission-schemes": {
		"get": {
		  "summary": "Search for permission schemes",
		  "operationId": "getPermissionSchemes",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/permissionSchemesGetResponseObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression. For example, <i> expand='all' </i>",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Permission Schemes"
		  ]
		}
	  },
	  "/permission-schemes/{id}": {
		"get": {
		  "summary": "Retrieve a permission scheme",
		  "operationId": "getPermissionSchemeById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/permissionSchemesGetByIdResponseObject"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  permission-schemes ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Permission Schemes"
		  ]
		}
	  },
	  "/ping": {
		"get": {
		  "operationId": "getPing",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Pong"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
		  "tags": [
			"Ping"
		  ]
		}
	  },
	  "/priorities": {
		"get": {
		  "summary": "Retrieves a list of priorities",
		  "operationId": "getPriorities",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Priority"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "nextPage",
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Priorities"
		  ]
		}
	  },
	  "/priorities/{id}": {
		"get": {
		  "summary": "Retrieve priority field from the help desk systemPriority field that does not exist will result in an error response.",
		  "operationId": "getPriorityById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Priority"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the priority",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Priorities"
		  ]
		}
	  },
	  "/project-categories": {
		"get": {
		  "summary": "Search for project categories",
		  "operationId": "getProjectCategories",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/projectCategoriesGetAllResponseObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Project Categories"
		  ]
		}
	  },
	  "/project-categories/{id}": {
		"get": {
		  "summary": "Retrieve a project category",
		  "operationId": "getProjectCategoryById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/projectCategoriesGetByIdResponseObject"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  project category ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Project Categories"
		  ]
		}
	  },
	  "/projects": {
		"post": {
		  "summary": "Create a project.",
		  "operationId": "createProject",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/projects"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/projectsPost"
			  },
			  "in": "body",
			  "name": "body",
			  "description": "The project body",
			  "required": true
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		},
		"get": {
		  "summary": "Search for a projects.",
		  "operationId": "getProjects",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/projectsListObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression. For example, <i> projectTypeKey='service_desk' </i>.  Although, for valid search fields refer to JIRA docs <a href='https://developer.atlassian.com/cloud/jira/platform/rest/v3/#api-api-3-project-search-get'> here <a>",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "expand",
			  "description": "Use <i> expand </i> to include additional information in the response.  This parameter accepts multiple values separated by a comma.  The supported values are <b> description, projectKeys, lead, issueTypes, url </b>.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided. ",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		}
	  },
	  "/projects/{id}": {
		"patch": {
		  "summary": "Update a project.",
		  "operationId": "updateProjectById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/projects"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  project ID",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"$ref": "#/definitions/projectsPatch"
			  },
			  "in": "body",
			  "name": "body",
			  "description": "The project body",
			  "required": true
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		},
		"get": {
		  "summary": "Retrieve a project.",
		  "operationId": "getProjectById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/projects"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  project ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		},
		"delete": {
		  "summary": "Delete a project.",
		  "operationId": "deleteProjectById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  project ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		}
	  },
	  "/projects/{id}/avatars": {
		"get": {
		  "summary": "Retrieve an avatar for project",
		  "operationId": "getProjectsAvatars",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/projectsAvatarsGetObject"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The  project ID",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Projects"
		  ]
		}
	  },
	  "/statuses": {
		"get": {
		  "summary": "Retrieve Status or statuses in the help desk system.",
		  "operationId": "getStatuses",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Status"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The number of results to return per page",
			  "type": "integer",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "nextPage",
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Statuses"
		  ]
		}
	  },
	  "/statuses/{id}": {
		"get": {
		  "summary": "Retrieve status field from the help desk systemStatus field that does not exist will result in an error response.",
		  "operationId": "getStatuseById",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Status"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "id",
			  "description": "The ID of the status",
			  "type": "string",
			  "required": true
			}
		  ],
		  "tags": [
			"Statuses"
		  ]
		}
	  },
	  "/worklogs": {
		"get": {
		  "summary": "Search for a worklogs",
		  "operationId": "getWorklogs",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/worklogsListObject"
				}
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression. Either id, updated or deleted is required. <b>Note</b>, the value for `updated` and `deleted` can be only `true`. To return results for specific ids, you should pass `id`, eg. <i> id in (10200,10300)</i>. To return updated or deleted results after a certain date you can pass since, eg. <i>updated='true'and since='121438013671562'</i> . If since is not passed, it will default to 0. To return extra properties on an updated or id request, you can pass expand, eg.<i>updated='true' and expand='issue.id,name'</i>. ",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "pageSize",
			  "format": "int64",
			  "description": "The page size. Defaults to 200 if not provided",
			  "type": "string",
			  "required": false
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "tags": [
			"Worklogs"
		  ]
		}
	  },
	  "/{objectName}": {
		"post": {
		  "summary": "Create a new object of type in Jira.  Object creation will flow through Cloud Elements to Jira.  Creating duplicate objects of type will return an error message.",
		  "operationId": "createByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The name of the object to create",
			  "type": "string",
			  "required": true
			},
			{
			  "schema": {
				"type": "object"
			  },
			  "in": "body",
			  "name": "object",
			  "description": "The object to create",
			  "required": true
			}
		  ],
		  "tags": [
			"Object Name"
		  ]
		},
		"get": {
		  "summary": "Search for objects in Jira, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all objects whose name equals 'foo', the search expression parameter will be where=name='foo'.  Performing a search without these parameters will return all results.  <p>If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.",
		  "operationId": "getByObjectName",
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "parameters": [
			{
			  "in": "header",
			  "name": "Authorization",
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "path",
			  "name": "objectName",
			  "description": "The object name of the object to search, e.g., 'account'.",
			  "type": "string",
			  "required": true
			},
			{
			  "in": "query",
			  "name": "where",
			  "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects that were last modified on or after 'Jan 15, 2014', the search expression will be <i>where=lastModifiedDate>='2014-01-15T00:00:00.000Z'</i>. When this parameter is omitted, all objects of the given type are returned in a paginated fashion.",
			  "type": "string",
			  "required": false
			},
			{
			  "in": "query",
			  "name": "includeDeleted",
			  "description": "Specify if deleted objects should be included in the search.",
			  "type": "boolean",
			  "required": false
			}
		  ],
		  "tags": [
			"Object Name"
		  ]
		}
	  },
	  "/{objectName}/{objectId}": {
		"delete": {
		  "operationId": "deleteObjectNameByObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Delete an {objectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"get": {
		  "operationId": "getObjectNameByObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "produces": [
			"application/json",
			"application/pdf"
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Retrieve an {objectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"patch": {
		  "operationId": "updateObjectNameByObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName}",
			  "in": "body",
			  "name": "Body",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Update an {objectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"put": {
		  "operationId": "replaceObjectNameByObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName}",
			  "in": "body",
			  "name": "Body",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the 'Accept' header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Update an {objectName}",
		  "tags": [
			"Object Name"
		  ]
		}
	  },
	  "/{objectName}/{objectId}/{childObjectName}": {
		"get": {
		  "operationId": "getObjectNameByChildObjectName",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the childObjectName",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The CEQL search expression.",
			  "in": "query",
			  "name": "where",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
			  "format": "int64",
			  "in": "query",
			  "name": "pageSize",
			  "required": false,
			  "type": "integer"
			},
			{
			  "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
			  "in": "query",
			  "name": "nextPage",
			  "required": false,
			  "type": "string"
			},
			{
			  "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
			  "in": "query",
			  "name": "fields",
			  "required": false,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"items": {
				  "$ref": "#/definitions/Object"
				},
				"type": "array"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Search for {childObjectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"post": {
		  "operationId": "createObjectNameByChildObjectName",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {childObjectName}",
			  "in": "body",
			  "name": "Body",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Create an {objectName}",
		  "tags": [
			"Object Name"
		  ]
		}
	  },
	  "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
		"delete": {
		  "operationId": "deleteObjectNameByChildObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the childObjectName",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {childObjectName} ID",
			  "in": "path",
			  "name": "childObjectId",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected"
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Delete an {childObjectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"get": {
		  "operationId": "getObjectNameByChildObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the childObjectName",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {childObjectName} ID",
			  "in": "path",
			  "name": "childObjectId",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Retrieve an {childObjectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"patch": {
		  "operationId": "updateObjectNameByChildObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the childObjectName",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {childObjectName} ID",
			  "in": "path",
			  "name": "childObjectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName}",
			  "in": "body",
			  "name": "Body",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Update an {childObjectName}",
		  "tags": [
			"Object Name"
		  ]
		},
		"put": {
		  "operationId": "replaceObjectNameByChildObjectId",
		  "parameters": [
			{
			  "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			  "in": "header",
			  "name": "Authorization",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the object",
			  "in": "path",
			  "name": "objectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The name of the childObjectName",
			  "in": "path",
			  "name": "childObjectName",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName} ID",
			  "in": "path",
			  "name": "objectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {childObjectName} ID",
			  "in": "path",
			  "name": "childObjectId",
			  "required": true,
			  "type": "string"
			},
			{
			  "description": "The {objectName}",
			  "in": "body",
			  "name": "Body",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "OK - Everything worked as expected",
			  "schema": {
				"$ref": "#/definitions/Object"
			  }
			},
			"400": {
			  "description": "Bad Request - Often due to a missing request parameter"
			},
			"401": {
			  "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
			},
			"403": {
			  "description": "Forbidden - Access to the resource by the provider is forbidden"
			},
			"404": {
			  "description": "Not found - The requested resource is not found"
			},
			"405": {
			  "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
			},
			"406": {
			  "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
			},
			"409": {
			  "description": "Conflict - If a resource being created already exists"
			},
			"415": {
			  "description": "Unsupported media type - The server cannot handle the requested Content-Type"
			},
			"500": {
			  "description": "Server error - Something went wrong on the Cloud Elements server"
			},
			"502": {
			  "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
			}
		  },
		  "summary": "Update an {childObjectName}",
		  "tags": [
			"Object Name"
		  ]
		}
	  }
	},
	"host": "hostname",
	"schemes": [
	  "https"
	],
	"definitions": {
	  "projects": {
		"properties": {
		  "assigneeType": {
			"enum": [
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrls"
		  },
		  "components": {
			"items": {
			  "$ref": "#/definitions/components"
			},
			"type": "array"
		  },
		  "description": {
			"type": "string"
		  },
		  "email": {
			"type": "string"
		  },
		  "expand": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "issueTypes": {
			"items": {
			  "$ref": "#/definitions/issueTypes"
			},
			"type": "array"
		  },
		  "key": {
			"type": "string"
		  },
		  "lead": {
			"$ref": "#/definitions/lead"
		  },
		  "name": {
			"type": "string"
		  },
		  "projectCategory": {
			"$ref": "#/definitions/projectCategory"
		  },
		  "projectKeys": {
			"items": {
			  "type": "string"
			},
			"type": "array"
		  },
		  "projectTypeKey": {
			"type": "string"
		  },
		  "roles": {
			"$ref": "#/definitions/roles"
		  },
		  "self": {
			"type": "string"
		  },
		  "url": {
			"type": "string"
		  },
		  "versions": {
			"items": {
			  "$ref": "#/definitions/versions"
			},
			"type": "array"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "project",
		"type": "object"
	  },
	  "History": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/Author"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2018-01-31T02:06:47.917-0700",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "69019",
			"x-readOnly": true
		  },
		  "items": {
			"items": {
			  "$ref": "#/definitions/items"
			},
			"type": "array"
		  }
		},
		"title": "History",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issue",
		"type": "object"
	  },
	  "incidentsTransitionsPostReqFields": {
		"properties": {
		  "assignee": {
			"$ref": "#/definitions/incidentsTransitionsPostReqFieldsAssignee"
		  },
		  "resolution": {
			"$ref": "#/definitions/incidentsTransitionsPostReqFieldsResolution"
		  }
		},
		"title": "fields",
		"type": "object"
	  },
	  "IncidentTypePatch": {
		"properties": {
		  "avatarId": {
			"format": "int32",
			"type": "integer",
			"x-conditionally-required-description": "AvatarId must already Be Present.",
			"x-samplevalue": 10300
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "The sub-task of the issue"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Bug"
		  }
		},
		"title": "incidentTypePatch",
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "issuetype",
		"type": "object"
	  },
	  "IncidentsUpdate": {
		"properties": {
		  "components": {
			"items": {
			  "$ref": "#/definitions/updateComponents"
			},
			"type": "array"
		  },
		  "labels": {
			"items": {
			  "$ref": "#/definitions/incidentsUpdateLabels"
			},
			"type": "array"
		  },
		  "summary": {
			"items": {
			  "$ref": "#/definitions/updateSummary"
			},
			"type": "array"
		  },
		  "timetracking": {
			"items": {
			  "$ref": "#/definitions/incidentsUpdatetimetracking"
			},
			"type": "array"
		  }
		},
		"title": "IncidentsUpdate",
		"type": "object",
		"x-has-customfields": false
	  },
	  "notificationSchemesGetResponseObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "description"
		  },
		  "expand": {
			"type": "string",
			"x-samplevalue": "notificationSchemeEvents,user,group,projectRole,field,all"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10100
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "notification scheme name"
		  },
		  "notificationSchemeEvents": {
			"items": {
			  "$ref": "#/definitions/notificationSchemeEvents"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/notificationscheme"
		  }
		},
		"title": "notificationSchemesGetResponse",
		"type": "object",
		"x-has-customfields": true,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Notificationscheme"
	  },
	  "attachmentsauthor": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-samplevalue": "99:27935d01-92a7-4687-8272-a9b8d3b2ae2e"
		  },
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/attachmentsavatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Fred F. User"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "fred@example.com",
			"x-sub-format": "email"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "fred"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "fred"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/rest/api/2/user?username=fred"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "Australia/Sydney"
		  }
		},
		"title": "attachmentsauthor",
		"type": "object",
		"x-has-customfields": false
	  },
	  "Status": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "iconUrl": {
			"type": "string",
			"x-sub-format": "Image URL (base 64)"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"enum": [
			  "Open",
			  "In Progress",
			  "Reopened",
			  "Resolved",
			  "Closed",
			  "Done",
			  "To Do",
			  "Ready for QA",
			  "QA Passed",
			  "QA In Progress",
			  "PO Accepted"
			],
			"type": "string",
			"x-name": true,
			"x-sub-format": "Enum"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "statusCategory": {
			"$ref": "#/definitions/StatusCategory"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "status",
		"type": "object"
	  },
	  "projectsListObject": {
		"properties": {
		  "assigneeType": {
			"enum": [
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrls"
		  },
		  "components": {
			"items": {
			  "$ref": "#/definitions/components"
			},
			"type": "array"
		  },
		  "description": {
			"type": "string"
		  },
		  "email": {
			"type": "string"
		  },
		  "expand": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "issueTypes": {
			"items": {
			  "$ref": "#/definitions/issueTypes"
			},
			"type": "array"
		  },
		  "key": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-operators": [
			  "="
			]
		  },
		  "lead": {
			"$ref": "#/definitions/lead"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-searchable": true,
			"x-searchable-operators": [
			  "="
			]
		  },
		  "projectCategory": {
			"$ref": "#/definitions/projectCategory"
		  },
		  "projectKeys": {
			"items": {
			  "type": "string"
			},
			"type": "array"
		  },
		  "projectTypeKey": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-operators": [
			  "="
			]
		  },
		  "roles": {
			"$ref": "#/definitions/roles"
		  },
		  "self": {
			"type": "string"
		  },
		  "simplified": {
			"type": "boolean"
		  },
		  "url": {
			"type": "string"
		  },
		  "versions": {
			"items": {
			  "$ref": "#/definitions/versions"
			},
			"type": "array"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "project",
		"x-where": [
		  "query",
		  "orderBy",
		  "searchBy",
		  "categoryId",
		  "action"
		],
		"type": "object"
	  },
	  "Assignee": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-reference-objectname": "user"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"type": "string",
			"x-name": true
		  },
		  "emailAddress": {
			"type": "string",
			"x-sub-format": "Email"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  },
		  "timeZone": {
			"type": "string",
			"x-sub-format": "Time Zone"
		  }
		},
		"type": "object"
	  },
	  "incidentsWorklogsPostReqUpdateAuthorAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "avatarUrls",
		"type": "object"
	  },
	  "swagger400": {
		"x-has-customfields": false,
		"type": "object",
		"title": "400",
		"properties": {
		  "description": {
			"x-samplevalue": "Bad Request - Often due to a missing request parameter",
			"type": "string"
		  }
		}
	  },
	  "IncidentType": {
		"properties": {
		  "avatarId": {
			"format": "int64",
			"type": "integer"
		  },
		  "description": {
			"type": "string"
		  },
		  "iconUrl": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": true
		  },
		  "name": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-readOnly": true,
			"x-sub-format": "URL"
		  },
		  "subtask": {
			"type": "boolean"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issuetype",
		"type": "object"
	  },
	  "swagger401": {
		"x-has-customfields": false,
		"type": "object",
		"title": "401",
		"properties": {
		  "description": {
			"x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
			"type": "string"
		  }
		}
	  },
	  "avatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string"
		  },
		  "24x24": {
			"type": "string"
		  },
		  "32x32": {
			"type": "string"
		  },
		  "48x48": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "swagger403": {
		"x-has-customfields": false,
		"type": "object",
		"title": "403",
		"properties": {
		  "description": {
			"x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
			"type": "string"
		  }
		}
	  },
	  "swagger404": {
		"x-has-customfields": false,
		"type": "object",
		"title": "404",
		"properties": {
		  "description": {
			"x-samplevalue": "Not found - The requested resource is not found",
			"type": "string"
		  }
		}
	  },
	  "CreateIncidentProject": {
		"properties": {
		  "id": {
			"type": "string",
			"x-conditionally-required-description": "id is required when key field is not present.",
			"x-reference-objectname": "project"
		  },
		  "key": {
			"type": "string",
			"x-conditionally-required-description": "key is required when id field is not present."
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "swagger405": {
		"x-has-customfields": false,
		"type": "object",
		"title": "405",
		"properties": {
		  "description": {
			"x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
			"type": "string"
		  }
		}
	  },
	  "jiraattachments": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/attachmentsauthor"
		  },
		  "content": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/attachments/10000"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2018-06-22T06:26:54.425+0000"
		  },
		  "filename": {
			"type": "string",
			"x-samplevalue": "picture.jpg"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "10001",
			"x-readOnly": true
		  },
		  "mimeType": {
			"type": "string",
			"x-samplevalue": "image/jpeg"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/rest/api/2.0/attachments/10000"
		  },
		  "size": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 23123
		  },
		  "thumbnail": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/secure/thumbnail/10000"
		  }
		},
		"title": "jiraattachments",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Attachment",
		"type": "object"
	  },
	  "incidentsTransitionsPostReqUpdate": {
		"properties": {
		  "comment": {
			"items": {
			  "$ref": "#/definitions/incidentsTransitionsPostReqUpdateComment"
			},
			"type": "array"
		  }
		},
		"title": "update",
		"type": "object"
	  },
	  "incidentPropResponse": {
		"properties": {},
		"type": "object"
	  },
	  "incidentsTransitionsPostReqHistoryMetadataExtraData": {
		"properties": {
		  "Iteration": {
			"type": "string",
			"x-samplevalue": "10a"
		  },
		  "Step": {
			"type": "string",
			"x-samplevalue": "4"
		  }
		},
		"title": "extraData",
		"type": "object"
	  },
	  "PatchIncidentFields": {
		"properties": {
		  "summary": {
			"type": "string",
			"x-samplevalue": "This is a shorthand for a set operation on the summary field"
		  }
		},
		"title": "PatchIncidentFields",
		"type": "object",
		"x-has-customfields": false
	  },
	  "swaggercontact": {
		"x-has-customfields": false,
		"type": "object",
		"title": "contact",
		"properties": {
		  "email": {
			"x-samplevalue": "support@cloud-elements.com",
			"type": "string"
		  }
		}
	  },
	  "actors": {
		"properties": {
		  "displayName": {
			"type": "string",
			"x-samplevalue": "jira-developers"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10240
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "jira-developers"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "atlassian-group-role-actor"
		  }
		},
		"title": "actors",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "Project": {
		"properties": {
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "id": {
			"type": "string"
		  },
		  "key": {
			"type": "string",
			"x-name": true
		  },
		  "name": {
			"type": "string"
		  },
		  "projectTypeKey": {
			"enum": [
			  "software",
			  "service_desk",
			  "business"
			],
			"type": "string",
			"x-sub-format": "Enum"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "project",
		"type": "object"
	  },
	  "incidentsWorklogsPostReqUpdateAuthor": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-samplevalue": "384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192"
		  },
		  "accountType": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/incidentsWorklogsPostReqUpdateAuthorAvatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "updateAuthor",
		"type": "object"
	  },
	  "projectRolePermissionObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "A project role that represents users in a project"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10000
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Users"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/role/10000"
		  }
		},
		"title": "projectRolePermissionObject",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		]
	  },
	  "incidentsWorklogsPostResUpdateAuthor": {
		"properties": {
		  "active": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Fred F. User"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "fred"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/rest/api/2/user?username=fred"
		  }
		},
		"title": "updateAuthor",
		"type": "object"
	  },
	  "swagger406": {
		"x-has-customfields": false,
		"type": "object",
		"title": "406",
		"properties": {
		  "description": {
			"x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
			"type": "string"
		  }
		}
	  },
	  "Author": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-readOnly": true,
			"x-reference-objectname": "user",
			"x-samplevalue": "557058:fb699ca9-4c24-46ed-a946-ea02dbf3dc55"
		  },
		  "active": {
			"type": "boolean",
			"x-readOnly": true,
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"type": "string",
			"x-readOnly": true,
			"x-samplevalue": "Jira Development"
		  },
		  "emailAddress": {
			"type": "string",
			"x-readOnly": true,
			"x-samplevalue": "jiradev@cloud-elements.com",
			"x-sub-format": "Email"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "jiradev"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-readOnly": true,
			"x-samplevalue": "jiradev",
			"x-sub-format": "Name"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/user?username=jiradev",
			"x-sub-format": "URL"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "Asia/Kolkata",
			"x-sub-format": "Time Zone"
		  }
		},
		"title": "author",
		"type": "object",
		"x-has-customfields": false
	  },
	  "swaggerdefinition-property": {
		"x-has-customfields": false,
		"type": "object",
		"title": "#/definitions/definition-property",
		"properties": {
		  "type": {
			"x-samplevalue": "string",
			"type": "string"
		  }
		}
	  },
	  "swagger409": {
		"x-has-customfields": false,
		"type": "object",
		"title": "409",
		"properties": {
		  "description": {
			"x-samplevalue": "Conflict - If a resource being created already exists",
			"type": "string"
		  }
		}
	  },
	  "items": {
		"properties": {
		  "field": {
			"type": "string",
			"x-samplevalue": "resolution"
		  },
		  "fieldId": {
			"type": "string",
			"x-samplevalue": "resolution"
		  },
		  "fieldtype": {
			"type": "string",
			"x-samplevalue": "jira"
		  },
		  "from": {
			"type": "string",
			"x-samplevalue": "10001"
		  },
		  "fromString": {
			"type": "string",
			"x-samplevalue": "To Do"
		  },
		  "to": {
			"type": "string",
			"x-samplevalue": "10000"
		  },
		  "toString": {
			"type": "string",
			"x-samplevalue": "Done"
		  }
		},
		"title": "items",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "Pong": {
		"properties": {
		  "dateTime": {
			"format": "date-time",
			"type": "string"
		  },
		  "endpoint": {
			"type": "string"
		  },
		  "valid": {
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "schema": {
		"properties": {
		  "type": {
			"type": "string",
			"x-samplevalue": "project"
		  }
		},
		"title": "schema",
		"type": "object",
		"x-has-customfields": true
	  },
	  "components": {
		"properties": {
		  "assignee": {
			"$ref": "#/definitions/lead"
		  },
		  "assigneeType": {
			"enum": [
			  "PROJECT_DEFAULT",
			  "COMPONENT_LEAD",
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "isAssigneeTypeValid": {
			"type": "boolean"
		  },
		  "lead": {
			"$ref": "#/definitions/lead"
		  },
		  "leadUserName": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "project": {
			"type": "string"
		  },
		  "projectId": {
			"format": "int64",
			"type": "integer"
		  },
		  "realAssignee": {
			"$ref": "#/definitions/lead"
		  },
		  "realAssigneeType": {
			"enum": [
			  "PROJECT_DEFAULT",
			  "COMPONENT_LEAD",
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "groupNotificationObj": {
		"properties": {
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "jira-administrators"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/group?groupname=jira-administrators"
		  }
		},
		"title": "groupNotificationObj",
		"type": "object",
		"x-has-customfields": false
	  },
	  "editTimeTracking": {
		"properties": {
		  "originalEstimate": {
			"type": "string",
			"x-samplevalue": "1w 1d"
		  },
		  "remainingEstimate": {
			"type": "string",
			"x-samplevalue": "4d"
		  }
		},
		"title": "editTimeTracking",
		"type": "object",
		"x-has-customfields": false
	  },
	  "OutwardIssueFields": {
		"properties": {
		  "status": {
			"$ref": "#/definitions/Status"
		  }
		},
		"type": "object"
	  },
	  "AssigneeIncidentPost": {
		"properties": {
		  "name": {
			"type": "string",
			"x-reference-objectname": "user"
		  }
		},
		"title": "AssigneeIncidentPost",
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"type": "object"
	  },
	  "incidentsTransitionsPostReqHistoryMetadata": {
		"properties": {
		  "activityDescription": {
			"type": "string",
			"x-samplevalue": "Complete order processing"
		  },
		  "actor": {
			"$ref": "#/definitions/incidentsTransitionsPostReqHistoryMetadataActor"
		  },
		  "cause": {
			"$ref": "#/definitions/incidentsTransitionsPostReqHistoryMetadataCause"
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "From the order testing process"
		  },
		  "extraData": {
			"$ref": "#/definitions/incidentsTransitionsPostReqHistoryMetadataExtraData"
		  },
		  "generator": {
			"$ref": "#/definitions/incidentsTransitionsPostReqHistoryMetadataGenerator"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "myplugin:type"
		  }
		},
		"title": "historyMetadata",
		"type": "object"
	  },
	  "issueTypes": {
		"properties": {
		  "avatarId": {
			"format": "int64",
			"type": "integer"
		  },
		  "description": {
			"type": "string"
		  },
		  "iconUrl": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  },
		  "subtask": {
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "StatusCategory": {
		"properties": {
		  "colorName": {
			"type": "string"
		  },
		  "id": {
			"format": "int32",
			"type": "integer"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"enum": [
			  "Done",
			  "To Do",
			  "In Progress"
			],
			"type": "string",
			"x-name": true,
			"x-sub-format": "Enum"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "statusCategory",
		"type": "object"
	  },
	  "InwardIssue": {
		"properties": {
		  "fields": {
			"$ref": "#/definitions/InwardIssueFields"
		  },
		  "id": {
			"type": "string"
		  },
		  "key": {
			"type": "string"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  }
		},
		"type": "object"
	  },
	  "remotelinks": {
		"properties": {
		  "link": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "Groups": {
		"properties": {
		  "items": {
			"items": {
			  "$ref": "#/definitions/Items"
			},
			"type": "array"
		  },
		  "size": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "projectCategoriesGetByIdResponseObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "First Project Category"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "10000"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "FIRST"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/projectCategory/10000"
		  }
		},
		"title": "projectCategoriesGetByIdResponseObject",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "ProjectCategory"
	  },
	  "TimetrackingIncident": {
		"properties": {
		  "originalEstimate": {
			"type": "string"
		  },
		  "originalEstimateSeconds": {
			"format": "int32",
			"type": "integer"
		  },
		  "remainingEstimate": {
			"type": "string"
		  },
		  "remainingEstimateSeconds": {
			"format": "int32",
			"type": "integer"
		  },
		  "timeSpent": {
			"type": "string"
		  },
		  "timeSpentSeconds": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "Votes": {
		"properties": {
		  "hasVoted": {
			"type": "boolean"
		  },
		  "self": {
			"type": "string"
		  },
		  "votes": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "IssuelinksType": {
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "inward": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "outward": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "Progress": {
		"properties": {
		  "percent": {
			"format": "int32",
			"type": "integer"
		  },
		  "progress": {
			"format": "int32",
			"type": "integer"
		  },
		  "total": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "incidentsWorklogsPostReqAuthor": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "accountType": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/incidentsWorklogsPostReqAuthorAvatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "author",
		"type": "object"
	  },
	  "permissionObject": {
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "key": {
			"enum": [
			  "ADD_COMMENTS",
			  "ADMINISTER",
			  "ADMINISTER_PROJECTS",
			  "ASSIGNABLE_USER",
			  "ASSIGN_ISSUES",
			  "BROWSE_PROJECTS",
			  "BULK_CHANGE",
			  "CLOSE_ISSUES",
			  "CREATE_ATTACHMENTS",
			  "CREATE_ISSUES",
			  "CREATE_SHARED_OBJECTS",
			  "DELETE_ALL_ATTACHMENTS",
			  "DELETE_ALL_COMMENTS",
			  "DELETE_ALL_WORKLOGS",
			  "DELETE_ISSUES",
			  "DELETE_OWN_ATTACHMENTS",
			  "DELETE_OWN_COMMENTS",
			  "DELETE_OWN_WORKLOGS",
			  "EDIT_ALL_COMMENTS",
			  "EDIT_ALL_WORKLOGS",
			  "EDIT_ISSUES",
			  "EDIT_OWN_COMMENTS",
			  "EDIT_OWN_WORKLOGS",
			  "LINK_ISSUES",
			  "MANAGE_GROUP_FILTER_SUBSCRIPTIONS",
			  "MANAGE_SPRINTS_PERMISSION",
			  "MANAGE_WATCHERS",
			  "MODIFY_REPORTER",
			  "MOVE_ISSUES",
			  "RESOLVE_ISSUES",
			  "SCHEDULE_ISSUES",
			  "SET_ISSUE_SECURITY",
			  "SYSTEM_ADMIN",
			  "TRANSITION_ISSUES",
			  "USER_PICKER",
			  "VIEW_DEV_TOOLS",
			  "VIEW_READONLY_WORKFLOW",
			  "VIEW_VOTERS_AND_WATCHERS",
			  "WORK_ON_ISSUES"
			],
			"type": "string",
			"x-sub-format": "Enum"
		  }
		},
		"type": "object"
	  },
	  "swagger500": {
		"x-has-customfields": false,
		"type": "object",
		"title": "500",
		"properties": {
		  "description": {
			"x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
			"type": "string"
		  }
		}
	  },
	  "swaggerpaths": {
		"x-has-customfields": false,
		"type": "object",
		"title": "paths",
		"properties": {
		  "/contacts": {
			"$ref": "#/definitions/swagger-contacts-path"
		  }
		}
	  },
	  "incidentsTransitionsPostReqUpdateCommentAdd": {
		"properties": {
		  "body": {
			"type": "string",
			"x-samplevalue": "Bug has been fixed."
		  }
		},
		"title": "add",
		"type": "object"
	  },
	  "swagger502": {
		"x-has-customfields": false,
		"type": "object",
		"title": "502",
		"properties": {
		  "description": {
			"x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
			"type": "string"
		  }
		}
	  },
	  "BulkStatus": {
		"description": "Status of the bulk upload.",
		"properties": {
		  "batchId": {
			"description": "Contact/Leads loaded",
			"type": "number"
		  },
		  "message": {
			"type": "string"
		  },
		  "numOfLeadsProcessed": {
			"description": "Contact/Leads loaded",
			"type": "number"
		  },
		  "numOfRowsFailed": {
			"description": "Failed count",
			"type": "number"
		  },
		  "numOfRowsWithWarning": {
			"description": "Contact/Leads that had warnings",
			"type": "number"
		  },
		  "status": {
			"description": "Status of the bulk job",
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "BulkJobList": {
		"title": "BulkJobList",
		"properties": {
		  "record_count": {
			"x-samplevalue": 41,
			"format": "int32",
			"type": "integer"
		  },
		  "job_query": {
			"x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
			"type": "string"
		  },
		  "job_reset_attempt": {
			"x-samplevalue": 0,
			"format": "int32",
			"type": "integer"
		  },
		  "completion_time": {
			"x-samplevalue": 1542829827804,
			"format": "int64",
			"type": "integer"
		  },
		  "status": {
			"x-samplevalue": "COMPLETED",
			"type": "string"
		  },
		  "notification_url": {
			"type": "string"
		  },
		  "job_direction": {
			"x-samplevalue": "DOWNLOAD",
			"type": "string"
		  },
		  "error_count": {
			"x-samplevalue": 0,
			"format": "int32",
			"type": "integer"
		  },
		  "job_state": {
			"type": "string"
		  },
		  "createdDate": {
			"x-samplevalue": 1542829826619,
			"format": "int64",
			"type": "integer"
		  },
		  "id": {
			"x-samplevalue": 1722,
			"format": "int32",
			"type": "integer"
		  },
		  "instanceId": {
			"x-samplevalue": 123453,
			"format": "int32",
			"type": "integer"
		  },
		  "object_name": {
			"x-samplevalue": "systemuser",
			"type": "string"
		  },
		  "fileFormat": {
			"x-samplevalue": "csv",
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "CreateComments": {
		"properties": {
		  "body": {
			"type": "string",
			"x-samplevalue": "Body Example"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": true,
			"x-samplevalue": "26633"
		  }
		},
		"required": [
		  "body"
		],
		"title": "CreateComments",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Comment",
		"type": "object"
	  },
	  "updateComponents": {
		"properties": {
		  "set": {
			"type": "string",
			"x-samplevalue": "1234"
		  }
		},
		"title": "updateComponents",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "actor": {
		"properties": {
		  "avatarUrl": {
			"type": "string",
			"x-samplevalue": "http://mysystem/avatar/tony.jpg",
			"x-sub-format": "URL"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Tony"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "tony"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-user"
		  },
		  "url": {
			"type": "string",
			"x-samplevalue": "http://mysystem/users/tony",
			"x-sub-format": "URL"
		  }
		},
		"title": "actor",
		"type": "object",
		"x-has-customfields": false
	  },
	  "authorWorklogs": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrls"
		  },
		  "displayName": {
			"type": "string"
		  },
		  "emailAddress": {
			"type": "string"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  },
		  "timeZone": {
			"type": "string"
		  }
		},
		"x-displayName": "User",
		"type": "object"
	  },
	  "IncidentResponse": {
		"properties": {
		  "expand": {
			"type": "string"
		  },
		  "fields": {
			"$ref": "#/definitions/Fields"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": true
		  },
		  "key": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  }
		},
		"x-has-customfields": true,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issue",
		"type": "object"
	  },
	  "incidentsTransitionsTo": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "This issue is being actively worked on at the moment by the assignee."
		  },
		  "iconUrl": {
			"type": "string",
			"x-samplevalue": "https://claudetemp.atlassian.net/images/icons/statuses/inprogress.png"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "3"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "In Progress"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://claudetemp.atlassian.net/rest/api/2/status/3"
		  },
		  "statusCategory": {
			"$ref": "#/definitions/incidentsTransitionsToStatusCategory"
		  }
		},
		"title": "to",
		"type": "object"
	  },
	  "ApplicationRoles": {
		"properties": {
		  "items": {
			"items": {
			  "$ref": "#/definitions/Items"
			},
			"type": "array"
		  },
		  "size": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "incidentsWorkLogGetResAuthorAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=16"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=24"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=32"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=48"
		  }
		},
		"title": "avatarUrls",
		"type": "object"
	  },
	  "CreateIncident": {
		"properties": {
		  "fields": {
			"$ref": "#/definitions/CreateIncidentFields"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": true
		  }
		},
		"required": [
		  "fields"
		],
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issue",
		"type": "object"
	  },
	  "updateSummary": {
		"properties": {
		  "set": {
			"type": "string",
			"x-samplevalue": "Bug in business logic"
		  }
		},
		"title": "updateSummary",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "BulkUploadResponse": {
		"description": "BulkLoad response of bulk download.",
		"properties": {
		  "id": {
			"description": "Id of the bulk job",
			"type": "string"
		  },
		  "instanceId": {
			"description": "Instance Id of the bulk job",
			"format": "int64",
			"type": "integer"
		  },
		  "status": {
			"description": "Status of the bulk job",
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "Schema": {
		"properties": {
		  "system": {
			"type": "string"
		  },
		  "type": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "incidentsProperties": {
		"properties": {
		  "key": {
			"type": "string",
			"x-samplevalue": "key1"
		  },
		  "value": {
			"type": "string",
			"x-samplevalue": "can be set at issue create or update time"
		  }
		},
		"title": "incidentsProperties",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "Attachment": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/Author"
		  },
		  "content": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/secure/attachment/16386/createMeta.json",
			"x-sub-format": "URL"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2018-01-25T04:03:29.610-0700",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "filename": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "createMeta.json"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "16386",
			"x-readOnly": true
		  },
		  "mimeType": {
			"type": "string",
			"x-samplevalue": "binary/octet-stream",
			"x-sub-format": "MIME Type"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/attachment/16386",
			"x-sub-format": "URL"
		  },
		  "size": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 2033043
		  },
		  "thumbnail": {
			"type": "string",
			"x-sub-format": "Image URL (base 64)"
		  }
		},
		"title": "Attachment",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Attachments",
		"type": "object"
	  },
	  "CreateIncidentIncidentType": {
		"properties": {
		  "id": {
			"type": "string",
			"x-conditionally-required-description": "id is required when name field is not present.",
			"x-reference-objectname": "issuetype"
		  },
		  "name": {
			"enum": [
			  "Bug",
			  "Story",
			  "Task",
			  "Sub-task",
			  "New Feature",
			  "Improvement",
			  "Epic"
			],
			"type": "string",
			"x-conditionally-required-description": "name is required when id field is not present.",
			"x-sub-format": "Enum"
		  }
		},
		"type": "object"
	  },
	  "swaggerparameters": {
		"x-has-customfields": false,
		"title": "parameters",
		"properties": {
		  "schema": {
			"$ref": "#/definitions/swaggerparametersschema"
		  },
		  "in": {
			"x-samplevalue": "header",
			"type": "string"
		  },
		  "name": {
			"x-samplevalue": "Authorization",
			"type": "string"
		  },
		  "description": {
			"x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
			"type": "string"
		  },
		  "type": {
			"x-samplevalue": "string",
			"type": "string"
		  },
		  "required": {
			"x-samplevalue": true,
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "groupavatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=16&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dxsmall%26avatarId%3D10122%26noRedirect%3Dtrue"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=24&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dsmall%26avatarId%3D10122%26noRedirect%3Dtrue"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=32&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dmedium%26avatarId%3D10122%26noRedirect%3Dtrue"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=48&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3FavatarId%3D10122%26noRedirect%3Dtrue"
		  }
		},
		"title": "groupavatarUrls",
		"type": "object",
		"x-has-customfields": false
	  },
	  "incidentsWorklogsPostReqProperties": {
		"properties": {
		  "key": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "properties",
		"type": "object"
	  },
	  "projectCategory": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "swagger200": {
		"x-has-customfields": false,
		"type": "object",
		"title": "200",
		"properties": {
		  "schema": {
			"$ref": "#/definitions/swaggerschema"
		  },
		  "description": {
			"x-samplevalue": "OK - Everything worked as expected",
			"type": "string"
		  }
		}
	  },
	  "visibility": {
		"properties": {
		  "type": {
			"enum": [
			  "group",
			  "role"
			],
			"type": "string"
		  },
		  "value": {
			"type": "string"
		  }
		},
		"x-displayName": "Visibility",
		"type": "object"
	  },
	  "attachmentsavatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/secure/useravatar?size=xsmall&ownerId=fred"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/secure/useravatar?size=medium&ownerId=fred"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred"
		  }
		},
		"title": "attachmentsavatarUrls",
		"type": "object",
		"x-has-customfields": false
	  },
	  "worklogsListObject": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/authorWorklogs"
		  },
		  "comment": {
			"type": "string"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
		  },
		  "id": {
			"type": "string"
		  },
		  "issueId": {
			"type": "string"
		  },
		  "properties": {
			"items": {
			  "$ref": "#/definitions/propertiesWorklog"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string"
		  },
		  "started": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
		  },
		  "timeSpent": {
			"type": "string"
		  },
		  "timeSpentSeconds": {
			"format": "int64",
			"type": "integer"
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/updateAuthor"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
		  },
		  "updatedTime": {
			"format": "int64",
			"type": "integer"
		  },
		  "visibility": {
			"$ref": "#/definitions/visibility"
		  },
		  "worklogId": {
			"format": "int64",
			"type": "integer"
		  }
		},
		"x-has-customfields": true,
		"x-primary-key": [
		  "worklogId"
		],
		"x-vendor-objectname": "worklog",
		"type": "object"
	  },
	  "IncidentPatchRequest": {
		"properties": {
		  "fields": {
			"$ref": "#/definitions/PatchIncidentFields"
		  },
		  "historyMetadata": {
			"$ref": "#/definitions/incidentHistoryMetadata"
		  },
		  "properties": {
			"items": {
			  "$ref": "#/definitions/incidentsProperties"
			},
			"type": "array"
		  },
		  "update": {
			"$ref": "#/definitions/IncidentsUpdate"
		  }
		},
		"title": "IncidentPatchRequest",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "bulkDownloadRequestQuery": {
		"properties": {
		  "anyKey": {
			"type": "string",
			"x-samplevalue": "anyValue"
		  }
		},
		"title": "query",
		"type": "object"
	  },
	  "IncidentVersions": {
		"properties": {
		  "archived": {
			"type": "boolean"
		  },
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "releaseDate": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd",
			"x-samplevalue": "2018-05-30",
			"x-sub-format": "Date (yyyy-mm-dd)"
		  },
		  "released": {
			"type": "boolean"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "incidentsWorkLogGetResUpdateAuthor": {
		"properties": {
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/incidentsWorkLogGetResUpdateAuthorAvatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "harikrishna+1@cloud-elements.com"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "harikrishna+1@cloud-elements.com"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "harikrishna+1"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "harikrishna+1"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://0064981e.ngrok.io/rest/api/2/user?username=harikrishna%2B1"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "America/Chicago"
		  }
		},
		"title": "updateAuthor",
		"type": "object"
	  },
	  "swagger415": {
		"x-has-customfields": false,
		"type": "object",
		"title": "415",
		"properties": {
		  "description": {
			"x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
			"type": "string"
		  }
		}
	  },
	  "roles": {
		"properties": {},
		"type": "object"
	  },
	  "IncidentComponents": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "Field": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "searcherKey": {
			"type": "string"
		  },
		  "type": {
			"type": "string"
		  }
		},
		"required": [
		  "name",
		  "type"
		],
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "projectRole": {
		"properties": {
		  "actors": {
			"items": {
			  "$ref": "#/definitions/actors"
			},
			"type": "array"
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "A project role that represents developers in a project"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10360
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "Developers"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/project/MKY/role/10360"
		  }
		},
		"title": "projectRole",
		"type": "object",
		"x-has-customfields": false
	  },
	  "IncidentWorklogs": {
		"properties": {
		  "maxResults": {
			"format": "int32",
			"type": "integer"
		  },
		  "startAt": {
			"format": "int32",
			"type": "integer"
		  },
		  "total": {
			"format": "int32",
			"type": "integer"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "worklogs": {
			"items": {
			  "$ref": "#/definitions/IncidentWorklogsObj"
			},
			"type": "array"
		  }
		},
		"type": "object"
	  },
	  "swaggerinfo": {
		"x-has-customfields": false,
		"type": "object",
		"title": "info",
		"properties": {
		  "contact": {
			"$ref": "#/definitions/swaggercontact"
		  },
		  "title": {
			"x-samplevalue": "hubspotcrm",
			"type": "string"
		  },
		  "version": {
			"x-samplevalue": "api-v2",
			"type": "string"
		  }
		}
	  },
	  "notificationsObject": {
		"properties": {
		  "emailAddress": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "rest-developer@atlassian.com",
			"x-sub-format": "email"
		  },
		  "expand": {
			"type": "string",
			"x-samplevalue": "group"
		  },
		  "field": {
			"$ref": "#/definitions/field"
		  },
		  "group": {
			"$ref": "#/definitions/groupNotificationObj"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1
		  },
		  "notificationType": {
			"type": "string",
			"x-samplevalue": "Group"
		  },
		  "parameter": {
			"type": "string",
			"x-samplevalue": "jira-administrators"
		  },
		  "projectRole": {
			"$ref": "#/definitions/projectRole"
		  },
		  "user": {
			"$ref": "#/definitions/userNotificationObj"
		  }
		},
		"title": "notifications",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "incidentNotifResponse": {
		"properties": {},
		"type": "object"
	  },
	  "incidentsUpdateLabels": {
		"properties": {
		  "add": {
			"type": "string",
			"x-samplevalue": "triaged"
		  },
		  "remove": {
			"type": "string",
			"x-samplevalue": "blocker"
		  }
		},
		"title": "incidentsUpdateLabels",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "ContactGetById": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "applicationRoles": {
			"$ref": "#/definitions/ApplicationRoles"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"description": "The display name for the user.",
			"type": "string",
			"x-readOnly": true
		  },
		  "emailAddress": {
			"type": "string",
			"x-sub-format": "Email"
		  },
		  "expand": {
			"type": "string"
		  },
		  "groups": {
			"$ref": "#/definitions/Groups"
		  },
		  "key": {
			"type": "string"
		  },
		  "locale": {
			"type": "string"
		  },
		  "name": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "timeZone": {
			"type": "string",
			"x-sub-format": "Time Zone"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "user",
		"type": "object"
	  },
	  "incidentsTransitionsPostReqUpdateComment": {
		"properties": {
		  "add": {
			"$ref": "#/definitions/incidentsTransitionsPostReqUpdateCommentAdd"
		  }
		},
		"title": "comment",
		"type": "object"
	  },
	  "swaggerpost": {
		"x-has-customfields": false,
		"type": "object",
		"title": "post",
		"properties": {
		  "summary": {
			"x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
			"type": "string"
		  },
		  "operationId": {
			"x-samplevalue": "createContact",
			"type": "string"
		  },
		  "responses": {
			"$ref": "#/definitions/swaggerresponses"
		  },
		  "parameters": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/swaggerparameters"
			}
		  },
		  "tags": {
			"x-samplevalue": [
			  "contacts"
			],
			"type": "array",
			"items": {
			  "type": "string"
			}
		  }
		}
	  },
	  "updateAuthor": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/updateAuthorAvatarUrls"
		  },
		  "displayName": {
			"type": "string"
		  },
		  "emailAddress": {
			"type": "string"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  },
		  "timeZone": {
			"type": "string"
		  }
		},
		"x-displayName": "User",
		"type": "object"
	  },
	  "IncidentSubtasks": {
		"properties": {
		  "expand": {
			"type": "string"
		  },
		  "fields": {
			"$ref": "#/definitions/SubtasksFields"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": true
		  },
		  "key": {
			"type": "string"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issue",
		"type": "object"
	  },
	  "swaggerdefinitions": {
		"x-has-customfields": false,
		"type": "object",
		"title": "definitions",
		"properties": {
		  "definition-name": {
			"$ref": "#/definitions/swaggerdefinition-name"
		  }
		}
	  },
	  "CreateIncidentVersions": {
		"properties": {
		  "archived": {
			"type": "boolean"
		  },
		  "id": {
			"type": "string",
			"x-conditionally-required-description": "id is required when name field is not present."
		  },
		  "name": {
			"type": "string",
			"x-conditionally-required-description": "name is required when id field is not present."
		  },
		  "released": {
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "incidentsTransitionsPostReqHistoryMetadataActor": {
		"properties": {
		  "avatarUrl": {
			"type": "string",
			"x-samplevalue": "http://mysystem/avatar/tony.jpg"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Tony"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "tony"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-user"
		  },
		  "url": {
			"type": "string",
			"x-samplevalue": "http://mysystem/users/tony"
		  }
		},
		"title": "actor",
		"type": "object"
	  },
	  "swaggerdefinition-name": {
		"x-has-customfields": false,
		"type": "object",
		"title": "definition-name",
		"properties": {
		  "properties": {
			"$ref": "#/definitions/swaggerproperties"
		  }
		}
	  },
	  "InwardIssueFields": {
		"properties": {
		  "issuetype": {
			"$ref": "#/definitions/IncidentType"
		  },
		  "priority": {
			"$ref": "#/definitions/IncidentPriority"
		  },
		  "status": {
			"$ref": "#/definitions/Status"
		  },
		  "summary": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "updateAuthorAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string"
		  },
		  "24x24": {
			"type": "string"
		  },
		  "32x32": {
			"type": "string"
		  },
		  "48x48": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "incidentsTransitionsPostReqFieldsAssignee": {
		"properties": {
		  "name": {
			"type": "string",
			"x-samplevalue": "Will"
		  }
		},
		"title": "assignee",
		"type": "object"
	  },
	  "incidentsPropertiesPutObject": {
		"properties": {
		  "custom_field": {
			"type": "string"
		  }
		},
		"x-has-customfields": true,
		"x-vendor-objectname": "priorities",
		"type": "object"
	  },
	  "IncidentTypePost": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "The sub-task of the issue"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Sub-task2"
		  },
		  "type": {
			"enum": [
			  "subtask",
			  "standard"
			],
			"type": "string",
			"x-sub-format": "subtask"
		  }
		},
		"required": [
		  "name"
		],
		"title": "IncidentTypePost",
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "issuetype",
		"type": "object"
	  },
	  "incidentsWorklogsPostReq": {
		"properties": {
		  "adjustEstimate": {
			"type": "string",
			"x-samplevalue": "manual"
		  },
		  "author": {
			"$ref": "#/definitions/incidentsWorklogsPostReqAuthor"
		  },
		  "comment": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-04-29T16:57:35.985+0200"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "issueId": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "newEstimate": {
			"type": "string",
			"x-samplevalue": "2d"
		  },
		  "properties": {
			"items": {
			  "$ref": "#/definitions/incidentsWorklogsPostReqProperties"
			},
			"type": "array"
		  },
		  "reduceBy": {
			"type": "string",
			"x-samplevalue": "1h"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "started": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-04-29T16:57:35.985+0200"
		  },
		  "timeSpent": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "timeSpentSeconds": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 192
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/incidentsWorklogsPostReqUpdateAuthor"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-04-29T16:57:35.985+0200"
		  },
		  "visibility": {
			"$ref": "#/definitions/incidentsWorklogsPostReqVisibility"
		  }
		},
		"title": "incidentsWorklogsPostReq",
		"type": "object"
	  },
	  "IncidentWorklogsObj": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/Author"
		  },
		  "comment": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "issueId": {
			"type": "string",
			"x-reference-objectname": "issue"
		  },
		  "self": {
			"type": "string"
		  },
		  "started": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "timeSpent": {
			"type": "string"
		  },
		  "timeSpentSeconds": {
			"format": "int64",
			"type": "integer"
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/Author"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "visibility": {
			"$ref": "#/definitions/Visibility"
		  }
		},
		"type": "object"
	  },
	  "incidentsWorklogsPostRes": {
		"properties": {
		  "adjustEstimate": {
			"type": "string",
			"x-samplevalue": "manual"
		  },
		  "author": {
			"$ref": "#/definitions/incidentsWorklogsPostResAuthor"
		  },
		  "comment": {
			"type": "string",
			"x-samplevalue": "I did some work here."
		  },
		  "newEstimate": {
			"type": "string",
			"x-samplevalue": "2d"
		  },
		  "reduceBy": {
			"type": "string",
			"x-samplevalue": "1h"
		  },
		  "started": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-04-29T16:57:35.985+0200"
		  },
		  "timeSpent": {
			"type": "string",
			"x-samplevalue": "3h 20m"
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/incidentsWorklogsPostResUpdateAuthor"
		  }
		},
		"title": "incidentsWorklogsPostRes",
		"type": "object"
	  },
	  "swagger-contacts-path": {
		"x-has-customfields": false,
		"type": "object",
		"title": "/contacts",
		"properties": {
		  "post": {
			"$ref": "#/definitions/swaggerpost"
		  }
		}
	  },
	  "Agent": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-names": [
			  "username"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "emailAddress": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-names": [
			  "username"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true,
			"x-sub-format": "Email"
		  },
		  "key": {
			"type": "string",
			"x-readOnly": true,
			"x-searchable": true,
			"x-searchable-names": [
			  "username"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "locale": {
			"type": "string"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-searchable": true,
			"x-searchable-names": [
			  "username"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "timeZone": {
			"type": "string",
			"x-sub-format": "Time Zone"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-searchable": true,
		"x-vendor-objectname": "user",
		"type": "object"
	  },
	  "incidentsPropertiesList": {
		"properties": {
		  "keys": {
			"items": {
			  "$ref": "#/definitions/keys"
			},
			"type": "array"
		  }
		},
		"x-has-customfields": false,
		"x-vendor-objectname": "priorities",
		"type": "object"
	  },
	  "avatarUrl": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=16&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dxsmall%26avatarId%3D10122%26noRedirect%3Dtrue",
			"x-sub-format": "URL"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=24&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dsmall%26avatarId%3D10122%26noRedirect%3Dtrue",
			"x-sub-format": "URL"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=32&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3Fsize%3Dmedium%26avatarId%3D10122%26noRedirect%3Dtrue",
			"x-sub-format": "URL"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "https://avatar-cdn.atlassian.com/e846fdf826b6edee686b43e3c916bde3?s=48&d=https%3A%2F%2Fcloud-elements-dev.atlassian.net%2Fsecure%2Fuseravatar%3FavatarId%3D10122%26noRedirect%3Dtrue",
			"x-sub-format": "URL"
		  }
		},
		"title": "avatarUrl",
		"type": "object",
		"x-has-customfields": false
	  },
	  "permissionSchemesGetByIdResponseObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "This is the default Permission Scheme. Any new projects that are created will be assigned this scheme."
		  },
		  "expand": {
			"type": "string",
			"x-samplevalue": "permissions,user,group,projectRole,field,all"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 0
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Default Permission Scheme"
		  },
		  "permissions": {
			"items": {
			  "$ref": "#/definitions/permissionsObject"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/permissionscheme/0"
		  }
		},
		"title": "permissionSchemesGetByIdResponseObject",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Permissionscheme"
	  },
	  "incidentsTransitionsPostReqFieldsResolution": {
		"properties": {
		  "name": {
			"type": "string",
			"x-samplevalue": "Fixed"
		  }
		},
		"title": "resolution",
		"type": "object"
	  },
	  "FieldsList": {
		"properties": {
		  "clauseNames": {
			"items": {
			  "type": "string"
			},
			"type": "array"
		  },
		  "custom": {
			"type": "boolean"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "navigable": {
			"type": "boolean"
		  },
		  "orderable": {
			"type": "boolean"
		  },
		  "schema": {
			"$ref": "#/definitions/Schema"
		  },
		  "searchable": {
			"type": "boolean"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "Issuelinks": {
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "inwardIssue": {
			"$ref": "#/definitions/InwardIssue"
		  },
		  "outwardIssue": {
			"$ref": "#/definitions/OutwardIssue"
		  },
		  "type": {
			"$ref": "#/definitions/IssuelinksType"
		  }
		},
		"type": "object"
	  },
	  "swaggerDocs": {
		"x-has-customfields": false,
		"title": "swaggerDocs",
		"properties": {
		  "basePath": {
			"x-samplevalue": "/elements/api-v2/hubs/crm",
			"type": "string"
		  },
		  "paths": {
			"$ref": "#/definitions/swaggerpaths"
		  },
		  "host": {
			"x-samplevalue": "localhost:5050",
			"type": "string"
		  },
		  "schemes": {
			"x-samplevalue": [
			  "http"
			],
			"type": "array",
			"items": {
			  "type": "string"
			}
		  },
		  "definitions": {
			"$ref": "#/definitions/swaggerdefinitions"
		  },
		  "swagger": {
			"x-samplevalue": "2.0",
			"type": "string"
		  },
		  "info": {
			"$ref": "#/definitions/swaggerinfo"
		  },
		  "tags": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/swaggertags"
			}
		  }
		},
		"type": "object"
	  },
	  "projectsPost": {
		"properties": {
		  "assigneeType": {
			"enum": [
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "avatarId": {
			"format": "int64",
			"type": "integer"
		  },
		  "categoryId": {
			"format": "int64",
			"type": "integer"
		  },
		  "description": {
			"type": "string"
		  },
		  "issueSecurityScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "key": {
			"type": "string"
		  },
		  "lead": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "notificationScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "permissionScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "projectTemplateKey": {
			"type": "string"
		  },
		  "projectTypeKey": {
			"type": "string"
		  },
		  "url": {
			"type": "string"
		  }
		},
		"required": [
		  "name",
		  "projectTypeKey",
		  "key",
		  "lead"
		],
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "project",
		"type": "object"
	  },
	  "incidentsTransitionsObject": {
		"properties": {
		  "hasScreen": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "21"
		  },
		  "isAvailable": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "isConditional": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "isGlobal": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "isInitial": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "InProgress"
		  },
		  "to": {
			"$ref": "#/definitions/incidentsTransitionsTo"
		  }
		},
		"title": "incidentsTransitions",
		"type": "object",
		"x-primary-key": [
		  "id"
		]
	  },
	  "field": {
		"properties": {
		  "clauseNames": {
			"items": {
			  "type": "string"
			},
			"type": "array",
			"x-samplevalue": [
			  "cf[10101]",
			  "New custom field"
			]
		  },
		  "custom": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "customfield_10101"
		  },
		  "key": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "custom_fields_may_have_friendly_keys"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "New custom field"
		  },
		  "navigable": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "orderable": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "schema": {
			"$ref": "#/definitions/schema"
		  },
		  "searchable": {
			"type": "boolean",
			"x-samplevalue": true
		  }
		},
		"title": "field",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		]
	  },
	  "SubtasksFields": {
		"properties": {
		  "aggregateprogress": {
			"$ref": "#/definitions/Progress"
		  },
		  "assignee": {
			"$ref": "#/definitions/Assignee",
			"x-displayName": "Assignee"
		  },
		  "attachment": {
			"items": {
			  "$ref": "#/definitions/Attachment"
			},
			"type": "array",
			"x-displayName": "Attachment"
		  },
		  "comment": {
			"items": {
			  "$ref": "#/definitions/IncidentCommentResponse"
			},
			"type": "array"
		  },
		  "components": {
			"items": {
			  "$ref": "#/definitions/IncidentComponents"
			},
			"type": "array",
			"x-displayName": "Component/s"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "creator": {
			"$ref": "#/definitions/Assignee"
		  },
		  "description": {
			"type": "string",
			"x-displayName": "Description"
		  },
		  "fixVersions": {
			"items": {
			  "$ref": "#/definitions/IncidentVersions"
			},
			"type": "array",
			"x-displayName": "Fix Version/s"
		  },
		  "issuetype": {
			"$ref": "#/definitions/IssueType",
			"x-displayName": "Issue Type"
		  },
		  "labels": {
			"items": {
			  "type": "string"
			},
			"type": "array",
			"x-displayName": "Labels"
		  },
		  "lastViewed": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "priority": {
			"$ref": "#/definitions/IncidentPriority",
			"x-displayName": "Priority"
		  },
		  "progress": {
			"$ref": "#/definitions/Progress"
		  },
		  "project": {
			"$ref": "#/definitions/Project",
			"x-displayName": "Project"
		  },
		  "reporter": {
			"$ref": "#/definitions/Assignee",
			"x-displayName": "Reporter"
		  },
		  "resolution": {
			"$ref": "#/definitions/Resolution"
		  },
		  "resolutiondate": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "status": {
			"$ref": "#/definitions/Status"
		  },
		  "summary": {
			"type": "string",
			"x-displayName": "Summary"
		  },
		  "timetracking": {
			"$ref": "#/definitions/TimetrackingIncident",
			"x-displayName": "Time Tracking"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "versions": {
			"items": {
			  "$ref": "#/definitions/IncidentVersions"
			},
			"type": "array",
			"x-displayName": "Affects Version/s"
		  },
		  "votes": {
			"$ref": "#/definitions/Votes"
		  },
		  "watches": {
			"$ref": "#/definitions/Watches"
		  },
		  "worklog": {
			"$ref": "#/definitions/IncidentWorklogs"
		  },
		  "workratio": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"x-has-customfields": true,
		"type": "object"
	  },
	  "versions": {
		"properties": {
		  "archived": {
			"type": "boolean"
		  },
		  "description": {
			"type": "string"
		  },
		  "expand": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "moveUnfixedIssuesTo": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "operations": {
			"items": {
			  "$ref": "#/definitions/operations"
			},
			"type": "array"
		  },
		  "overdue": {
			"type": "boolean"
		  },
		  "project": {
			"type": "string"
		  },
		  "projectId": {
			"format": "int64",
			"type": "integer"
		  },
		  "released": {
			"type": "boolean"
		  },
		  "remotelinks": {
			"items": {
			  "$ref": "#/definitions/remotelinks"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string"
		  },
		  "userReleaseDate": {
			"type": "string"
		  },
		  "userStartDate": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "projectsAvatarsGetObject": {
		"properties": {
		  "system": {
			"items": {
			  "$ref": "#/definitions/systemObject"
			},
			"type": "array"
		  }
		},
		"title": "projectsAvatarsGetObject",
		"x-has-customfields": true,
		"x-vendor-objectname": "Project",
		"type": "object"
	  },
	  "Object": {
		"description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
		"properties": {
		  "objectField": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "FieldsListList": {
		"items": {
		  "$ref": "#/definitions/FieldsList"
		},
		"type": "array"
	  },
	  "incidentsWorklogsPostResAuthor": {
		"properties": {
		  "active": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Fred F. User"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "fred"
		  }
		},
		"title": "author",
		"type": "object"
	  },
	  "permissionSchemesGetResponseObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "This is the default Permission Scheme. Any new projects that are created will be assigned this scheme."
		  },
		  "expand": {
			"type": "string",
			"x-samplevalue": "permissions,user,group,projectRole,field,all"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 0
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Default Permission Scheme"
		  },
		  "permissions": {
			"items": {
			  "$ref": "#/definitions/permissionsObject"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/permissionscheme/0"
		  }
		},
		"title": "permissionSchemesGetResponse",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Permissionscheme"
	  },
	  "issuesecuritySchemesGetResponseObject": {
		"properties": {
		  "defaultSecurityLevelId": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10021
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "Description for the default issue security scheme"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1000
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Default Issue Security Scheme"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2//issuesecurityschemes/1000"
		  }
		},
		"title": "issuesecuritySchemesGetResponse",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Issuesecurityschemes"
	  },
	  "IncidentPriority": {
		"properties": {
		  "iconUrl": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"enum": [
			  "Blocker",
			  "Critical",
			  "Major",
			  "Minor",
			  "Trivial"
			],
			"type": "string",
			"x-sub-format": "Enum"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "BulkQuery": {
		"description": "BulkLoad response of bulk download.",
		"properties": {
		  "id": {
			"description": "Id of the bulk job",
			"type": "number"
		  },
		  "status": {
			"description": "Status of the bulk job",
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "CreateIncidentPriority": {
		"properties": {
		  "id": {
			"type": "string",
			"x-conditionally-required-description": "id is required when name field is not present.",
			"x-reference-objectname": "priorities"
		  },
		  "name": {
			"enum": [
			  "Blocker",
			  "Critical",
			  "Major",
			  "Minor",
			  "Trivial"
			],
			"type": "string",
			"x-conditionally-required-description": "name is required when id field is not present.",
			"x-name": true,
			"x-sub-format": "Enum"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "permissionsObject": {
		"properties": {
		  "holder": {
			"$ref": "#/definitions/holderObject"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10021
		  },
		  "permission": {
			"enum": [
			  "DELETE_ALL_WORKLOGS",
			  "DELETE_OWN_WORKLOGS",
			  "EDIT_ALL_WORKLOGS",
			  "EDIT_OWN_WORKLOGS",
			  "WORK_ON_ISSUES"
			],
			"type": "string",
			"x-samplevalue": "DELETE_OWN_WORKLOGS"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/permissionscheme/0/permission/10021"
		  }
		},
		"title": "permissionsObject",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "projectCategoriesGetAllResponseObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "First Project Category"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "10000"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "FIRST"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/projectCategory/10000"
		  }
		},
		"title": "projectCategoriesGetAllResponse",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "ProjectCategory"
	  },
	  "incidentsTransitions": {
		"properties": {
		  "success": {
			"type": "string",
			"x-samplevalue": "true"
		  }
		},
		"title": "incidentsTransitions",
		"type": "object"
	  },
	  "levelsObject": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "Only the reporter and internal staff can see this issue."
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "10021"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Reporter Only"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2//securitylevel/10021"
		  }
		},
		"title": "levelsObject",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "event": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "Event published when an issue is created"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Issue created"
		  },
		  "templateEvent": {
			"$ref": "#/definitions/templateEvent"
		  }
		},
		"title": "event",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		]
	  },
	  "incidentsWorkLogGetResUpdateAuthorAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=16"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=24"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=32"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "https://www.gravatar.com/avatar/fb40b716adc9efa8483e255451fa6885?d=mm&s=48"
		  }
		},
		"title": "avatarUrls",
		"type": "object"
	  },
	  "incidentsWorkLogGetResAuthor": {
		"properties": {
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/incidentsWorkLogGetResAuthorAvatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "harikrishna+1@cloud-elements.com"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "harikrishna+1@cloud-elements.com"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "harikrishna+1"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "harikrishna+1"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://0064981e.ngrok.io/rest/api/2/user?username=harikrishna%2B1"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "America/Chicago"
		  }
		},
		"title": "author",
		"type": "object"
	  },
	  "systemObject": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "11546"
		  },
		  "isDeletable": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "isSelected": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "isSystemAvatar": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "selected": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "urls": {
			"$ref": "#/definitions/urlsObject"
		  }
		},
		"title": "systemObject",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"type": "object"
	  },
	  "OutwardIssue": {
		"properties": {
		  "fields": {
			"$ref": "#/definitions/OutwardIssueFields"
		  },
		  "id": {
			"type": "string"
		  },
		  "issuetype": {
			"$ref": "#/definitions/IncidentType"
		  },
		  "key": {
			"type": "string"
		  },
		  "priority": {
			"$ref": "#/definitions/IncidentPriority"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "summary": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "objectsMetadataFields": {
		"properties": {
		  "mask": {
			"type": "string"
		  },
		  "type": {
			"type": "string"
		  },
		  "vendorDisplayName": {
			"type": "string"
		  },
		  "vendorPath": {
			"type": "string"
		  },
		  "vendorReadOnly": {
			"type": "boolean"
		  },
		  "vendorRequired": {
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "ContactList": {
		"items": {
		  "$ref": "#/definitions/Contact"
		},
		"type": "array"
	  },
	  "restrictObject": {
		"properties": {
		  "groups": {
			"items": {
			  "$ref": "#/definitions/groupObject"
			},
			"type": "array"
		  },
		  "permissions": {
			"items": {
			  "$ref": "#/definitions/permissionObject"
			},
			"type": "array"
		  }
		},
		"type": "object"
	  },
	  "propertiesValue": {
		"properties": {},
		"type": "object"
	  },
	  "lead": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/leadAvatarUrls"
		  },
		  "displayName": {
			"type": "string"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "CreateIncidentFields": {
		"properties": {
		  "assignee": {
			"$ref": "#/definitions/AssigneeIncidentPost",
			"x-displayName": "Assignee"
		  },
		  "components": {
			"items": {
			  "$ref": "#/definitions/CreateIncidentComponents"
			},
			"type": "array",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Component/s"
		  },
		  "description": {
			"type": "string",
			"x-displayName": "Description"
		  },
		  "duedate": {
			"format": "date",
			"type": "string",
			"x-mask": "yyyy-MM-dd",
			"x-samplevalue": "2011-03-11",
			"x-sub-format": "Date (Custom)"
		  },
		  "environment": {
			"type": "string",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-samplevalue": "environment"
		  },
		  "fixVersions": {
			"items": {
			  "$ref": "#/definitions/CreateIncidentVersions"
			},
			"type": "array",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Fix Version/s"
		  },
		  "issuetype": {
			"$ref": "#/definitions/CreateIncidentIncidentType",
			"x-displayName": "Issue Type"
		  },
		  "labels": {
			"items": {
			  "type": "string"
			},
			"type": "array",
			"x-displayName": "Labels"
		  },
		  "priority": {
			"$ref": "#/definitions/CreateIncidentPriority",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Priority"
		  },
		  "project": {
			"$ref": "#/definitions/CreateIncidentProject",
			"x-displayName": "Project"
		  },
		  "reporter": {
			"$ref": "#/definitions/AssigneeIncidentPost",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Reporter"
		  },
		  "security": {
			"$ref": "#/definitions/security",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Security"
		  },
		  "summary": {
			"type": "string",
			"x-displayName": "Summary"
		  },
		  "timetracking": {
			"$ref": "#/definitions/editTimeTracking",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Security"
		  },
		  "versions": {
			"items": {
			  "$ref": "#/definitions/CreateIncidentVersions"
			},
			"type": "array",
			"x-conditionally-required-description": "This field is required only when it has been marked as required in the field configuration for the respective project.",
			"x-displayName": "Affects Version/s"
		  }
		},
		"required": [
		  "issuetype",
		  "project",
		  "summary"
		],
		"x-has-customfields": true,
		"type": "object"
	  },
	  "incidentsTransitionsPostReqHistoryMetadataCause": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "myevent"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-event"
		  }
		},
		"title": "cause",
		"type": "object"
	  },
	  "issuesecuritySchemesGetByIdResponse": {
		"properties": {
		  "defaultSecurityLevelId": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10021
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "Description for the default issue security scheme"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1000
		  },
		  "levels": {
			"items": {
			  "$ref": "#/definitions/levelsObject"
			},
			"type": "array"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Default Issue Security Scheme"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2//issuesecurityschemes/1000"
		  }
		},
		"title": "issuesecuritySchemesGetByIdResponse",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Issuesecurityschemes",
		"type": "object"
	  },
	  "swaggertags": {
		"x-has-customfields": false,
		"title": "tags",
		"properties": {
		  "name": {
			"x-samplevalue": "contacts",
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "incidentHistoryMetadata": {
		"properties": {
		  "activityDescription": {
			"type": "string",
			"x-samplevalue": "text description"
		  },
		  "activityDescriptionKey": {
			"type": "string",
			"x-samplevalue": "plugin.activity.i18.key"
		  },
		  "actor": {
			"$ref": "#/definitions/actor"
		  },
		  "cause": {
			"$ref": "#/definitions/cause"
		  },
		  "description": {
			"type": "string",
			"x-samplevalue": "text description"
		  },
		  "descriptionKey": {
			"type": "string",
			"x-samplevalue": "plugin.changereason.i18.key"
		  },
		  "generator": {
			"$ref": "#/definitions/generator"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "myplugin:type"
		  }
		},
		"title": "incidentHistoryMetadata",
		"type": "object",
		"x-has-customfields": false
	  },
	  "bulkDownloadRequest": {
		"properties": {
		  "apiLimit": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 100
		  },
		  "continueFromJobId": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1
		  },
		  "docsHubDetails": {
			"$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
		  },
		  "filterDateField": {
			"type": "string",
			"x-samplevalue": "lastModifiedDate"
		  },
		  "filterNulls": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "format": {
			"enum": [
			  "application/json",
			  "txt/csv",
			  "application/jsonl"
			],
			"type": "string",
			"x-samplevalue": "application/json"
		  },
		  "from": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
			"x-samplevalue": "2014-10-06T13:22:17-08:00"
		  },
		  "limit": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 107
		  },
		  "notificationUrl": {
			"type": "string",
			"x-samplevalue": "https://myreceiver.com/whatever"
		  },
		  "objectName": {
			"type": "string",
			"x-samplevalue": "accounts"
		  },
		  "pageSize": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 200
		  },
		  "query": {
			"$ref": "#/definitions/bulkDownloadRequestQuery"
		  },
		  "selectFields": {
			"type": "string",
			"x-samplevalue": "a,b,c"
		  },
		  "to": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
			"x-samplevalue": "2014-10-10T13:22:17-08:00"
		  },
		  "where": {
			"type": "string",
			"x-samplevalue": "name='Alex' and gender='male'"
		  }
		},
		"required": [
		  "objectName",
		  "format"
		],
		"title": "bulkDownloadRequest",
		"type": "object"
	  },
	  "incidentsWorklogsPostReqVisibility": {
		"properties": {
		  "type": {
			"type": "string",
			"x-samplevalue": "group"
		  },
		  "value": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "visibility",
		"type": "object"
	  },
	  "incidentsUpdatetimetracking": {
		"properties": {
		  "edit": {
			"$ref": "#/definitions/editTimeTracking"
		  }
		},
		"title": "incidentsUpdatetimetracking",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "groupvalues": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/groupavatarUrls"
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Jira Dev"
		  },
		  "emailAddress": {
			"type": "string",
			"x-samplevalue": "jiradev@cloud-elements.com"
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "jiradev"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "jiradev"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/user?username=jiradev"
		  },
		  "timeZone": {
			"type": "string",
			"x-samplevalue": "Asia/Kolkata"
		  }
		},
		"title": "groupvalues",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "incidentsWorkLogGetResObject": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/incidentsWorkLogGetResAuthor"
		  },
		  "comment": {
			"type": "string",
			"x-samplevalue": "I did some work here."
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-05-31T12:49:17.579-0500"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "10005"
		  },
		  "issueId": {
			"type": "string",
			"x-samplevalue": "10022"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://0064981e.ngrok.io/rest/api/2/issue/10022/worklog/10005"
		  },
		  "started": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-04-29T09:57:35.985-0500"
		  },
		  "timeSpent": {
			"type": "string",
			"x-samplevalue": "3h 20m"
		  },
		  "timeSpentSeconds": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 12000
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/incidentsWorkLogGetResUpdateAuthor"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2019-05-31T12:49:17.579-0500"
		  }
		},
		"title": "incidentsWorkLogGetRes",
		"type": "object",
		"x-primary-key": [
		  "id"
		]
	  },
	  "incidentsTransitionsToStatusCategory": {
		"properties": {
		  "colorName": {
			"type": "string",
			"x-samplevalue": "yellow"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 4
		  },
		  "key": {
			"type": "string",
			"x-samplevalue": "indeterminate"
		  },
		  "name": {
			"type": "string",
			"x-samplevalue": "In Progress"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://claudetemp.atlassian.net/rest/api/2/statuscategory/4"
		  }
		},
		"title": "statusCategory",
		"type": "object"
	  },
	  "templateEvent": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "Event published when an issue is created"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 1
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "Issue created"
		  }
		},
		"title": "templateEvent",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		]
	  },
	  "urlsObject": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "/secure/useravatar?size=xsmall&avatarId=11546"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "/secure/useravatar?size=small&avatarId=11546"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "/secure/useravatar?size=medium&avatarId=11546"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "/secure/useravatar?avatarId=11546"
		  }
		},
		"title": "urlsObject",
		"type": "object",
		"x-has-customfields": false
	  },
	  "Items": {
		"properties": {
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "notificationSchemeEvents": {
		"properties": {
		  "event": {
			"$ref": "#/definitions/event"
		  },
		  "notifications": {
			"items": {
			  "$ref": "#/definitions/notificationsObject"
			},
			"type": "array"
		  }
		},
		"title": "notificationSchemeEvents",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "author": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrls"
		  },
		  "displayName": {
			"type": "string"
		  },
		  "key": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "propertiesWorklog": {
		"properties": {
		  "key": {
			"type": "string"
		  },
		  "value": {
			"$ref": "#/definitions/propertiesValue"
		  }
		},
		"x-displayName": "Entity Property",
		"x-has-customfields": true,
		"x-vendor-objectname": "properties",
		"type": "object"
	  },
	  "Priority": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "iconUrl": {
			"type": "string",
			"x-readOnly": "true",
			"x-sub-format": "URL"
		  },
		  "id": {
			"type": "string",
			"x-readOnly": "true"
		  },
		  "name": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-readOnly": "true",
			"x-sub-format": "URL"
		  },
		  "statusColor": {
			"type": "string"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "priorities",
		"type": "object"
	  },
	  "CreateIncidentResponse": {
		"properties": {
		  "id": {
			"type": "string"
		  },
		  "key": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "issue",
		"type": "object"
	  },
	  "Fields": {
		"properties": {
		  "aggregateprogress": {
			"$ref": "#/definitions/Progress"
		  },
		  "aggregatetimeestimate": {
			"format": "int32",
			"type": "integer"
		  },
		  "aggregatetimeoriginalestimate": {
			"format": "int64",
			"type": "integer"
		  },
		  "aggregatetimespent": {
			"format": "int64",
			"type": "integer"
		  },
		  "assignee": {
			"$ref": "#/definitions/Assignee",
			"x-displayName": "Assignee"
		  },
		  "attachment": {
			"items": {
			  "$ref": "#/definitions/Attachment"
			},
			"type": "array",
			"x-displayName": "Attachment"
		  },
		  "comment": {
			"$ref": "#/definitions/IncidentCommentResponse"
		  },
		  "components": {
			"items": {
			  "$ref": "#/definitions/IncidentComponents"
			},
			"type": "array",
			"x-displayName": "Component/s"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-searchable": true,
			"x-searchable-operators": [
			  "!=",
			  ">",
			  ">=",
			  "<",
			  "<="
			],
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "creator": {
			"$ref": "#/definitions/Assignee"
		  },
		  "description": {
			"type": "string",
			"x-displayName": "Description"
		  },
		  "duedate": {
			"format": "date",
			"type": "string",
			"x-mask": "yyyy-mm-dd",
			"x-sub-format": "Date (Custom)"
		  },
		  "environment": {
			"type": "string"
		  },
		  "fixVersions": {
			"items": {
			  "$ref": "#/definitions/IncidentVersions"
			},
			"type": "array",
			"x-displayName": "Fix Version/s"
		  },
		  "issuelinks": {
			"items": {
			  "$ref": "#/definitions/Issuelinks"
			},
			"type": "array",
			"x-displayName": "Linked Issues"
		  },
		  "issuetype": {
			"$ref": "#/definitions/IssueType",
			"x-displayName": "Issue Type"
		  },
		  "labels": {
			"items": {
			  "type": "string"
			},
			"type": "array",
			"x-displayName": "Labels"
		  },
		  "lastViewed": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-searchable": true,
			"x-searchable-operators": [
			  "!=",
			  ">",
			  ">=",
			  "<",
			  "<="
			],
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "priority": {
			"$ref": "#/definitions/IncidentPriority",
			"x-displayName": "Priority"
		  },
		  "progress": {
			"$ref": "#/definitions/Progress"
		  },
		  "project": {
			"$ref": "#/definitions/Project",
			"x-displayName": "Project"
		  },
		  "reporter": {
			"$ref": "#/definitions/Assignee",
			"x-displayName": "Reporter"
		  },
		  "resolution": {
			"$ref": "#/definitions/Resolution"
		  },
		  "resolutiondate": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-searchable": true,
			"x-searchable-operators": [
			  "!=",
			  ">",
			  ">=",
			  "<",
			  "<="
			],
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "status": {
			"$ref": "#/definitions/Status"
		  },
		  "subtasks": {
			"items": {
			  "$ref": "#/definitions/IncidentSubtasks"
			},
			"type": "array",
			"x-displayName": "subtasks"
		  },
		  "summary": {
			"type": "string",
			"x-displayName": "Summary"
		  },
		  "timeestimate": {
			"format": "int64",
			"type": "integer"
		  },
		  "timeoriginalestimate": {
			"format": "int64",
			"type": "integer"
		  },
		  "timespent": {
			"format": "int64",
			"type": "integer"
		  },
		  "timetracking": {
			"$ref": "#/definitions/TimetrackingIncident",
			"x-displayName": "Time Tracking"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-searchable": true,
			"x-searchable-operators": [
			  "!=",
			  ">",
			  ">=",
			  "<",
			  "<="
			],
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "versions": {
			"items": {
			  "$ref": "#/definitions/IncidentVersions"
			},
			"type": "array",
			"x-displayName": "Affects Version/s"
		  },
		  "votes": {
			"$ref": "#/definitions/Votes"
		  },
		  "watches": {
			"$ref": "#/definitions/Watches"
		  },
		  "worklog": {
			"$ref": "#/definitions/IncidentWorklogs"
		  },
		  "workratio": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"x-has-customfields": true,
		"x-searchable": true,
		"type": "object"
	  },
	  "userNotificationObj": {
		"properties": {
		  "active": {
			"type": "boolean",
			"x-samplevalue": false
		  },
		  "displayName": {
			"type": "string",
			"x-samplevalue": "Mia Krystof"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "mia"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/user?username=mia"
		  }
		},
		"title": "user",
		"type": "object",
		"x-has-customfields": false
	  },
	  "incidentsTransitionsPostReq": {
		"properties": {
		  "fields": {
			"$ref": "#/definitions/incidentsTransitionsPostReqFields"
		  },
		  "historyMetadata": {
			"$ref": "#/definitions/incidentsTransitionsPostReqHistoryMetadata"
		  },
		  "transition": {
			"$ref": "#/definitions/incidentsTransitionsPostReqTransition"
		  },
		  "update": {
			"$ref": "#/definitions/incidentsTransitionsPostReqUpdate"
		  }
		},
		"required": [
		  "transition"
		],
		"title": "incidentsTransitionsPostReq",
		"type": "object"
	  },
	  "Visibility": {
		"properties": {
		  "type": {
			"type": "string"
		  },
		  "value": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "objectsMetadata": {
		"properties": {
		  "fields": {
			"items": {
			  "$ref": "#/definitions/objectsMetadataFields"
			},
			"type": "array"
		  }
		},
		"type": "object"
	  },
	  "Resolution": {
		"properties": {
		  "description": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "UpdateComments": {
		"properties": {
		  "body": {
			"type": "string",
			"x-samplevalue": "Body Example"
		  }
		},
		"required": [
		  "body"
		],
		"title": "UpdateComments",
		"x-has-customfields": false,
		"x-vendor-objectname": "Comment",
		"type": "object"
	  },
	  "swaggerschema": {
		"x-has-customfields": false,
		"type": "object",
		"title": "schema",
		"properties": {
		  "$ref": {
			"x-samplevalue": "#/definitions/Contact-POST-Response",
			"type": "string"
		  }
		}
	  },
	  "User": {
		"properties": {
		  "displayName": {
			"description": "The display name for the user.",
			"type": "string"
		  },
		  "emailAddress": {
			"description": "The email address for the user.",
			"type": "string",
			"x-sub-format": "Email"
		  },
		  "name": {
			"description": "The unique username for the user.",
			"type": "string",
			"x-name": true
		  },
		  "password": {
			"description": "A password for the user. If a password is not set, a random password is generated.",
			"type": "string",
			"x-sub-format": "Password"
		  }
		},
		"required": [
		  "displayName",
		  "name",
		  "emailAddress"
		],
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "user",
		"type": "object"
	  },
	  "holderObject": {
		"properties": {
		  "expand": {
			"type": "string",
			"x-samplevalue": "projectRole"
		  },
		  "parameter": {
			"type": "string",
			"x-samplevalue": "10000"
		  },
		  "projectRole": {
			"$ref": "#/definitions/projectRolePermissionObject"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "projectRole"
		  }
		},
		"title": "holderObject",
		"type": "object",
		"x-has-customfields": false
	  },
	  "keys": {
		"properties": {
		  "key": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "key"
		],
		"type": "object"
	  },
	  "Watches": {
		"properties": {
		  "isWatching": {
			"type": "boolean"
		  },
		  "self": {
			"type": "string"
		  },
		  "watchCount": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "cause": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "myevent"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-event"
		  }
		},
		"title": "cause",
		"type": "object",
		"x-has-customfields": false
	  },
	  "generator": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "mysystem-1"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-application"
		  }
		},
		"title": "generator",
		"type": "object",
		"x-has-customfields": false
	  },
	  "notificationSchemesGetByIdResponse": {
		"properties": {
		  "description": {
			"type": "string",
			"x-samplevalue": "description"
		  },
		  "expand": {
			"type": "string",
			"x-samplevalue": "notificationSchemeEvents,user,group,projectRole,field,all"
		  },
		  "id": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 10100
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "notification scheme name"
		  },
		  "notificationSchemeEvents": {
			"items": {
			  "$ref": "#/definitions/notificationSchemeEvents"
			},
			"type": "array"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "http://your-domain.atlassian.net/rest/api/2/notificationscheme"
		  }
		},
		"title": "notificationSchemesGetByIdResponse",
		"type": "object",
		"x-has-customfields": true,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Notificationscheme"
	  },
	  "swaggerparametersschema": {
		"x-has-customfields": false,
		"type": "object",
		"title": "schema",
		"properties": {
		  "$ref": {
			"x-samplevalue": "#/definitions/Contact",
			"type": "string"
		  }
		}
	  },
	  "swaggerresponses": {
		"x-has-customfields": false,
		"type": "object",
		"title": "responses",
		"properties": {
		  "200": {
			"$ref": "#/definitions/swagger200"
		  },
		  "400": {
			"$ref": "#/definitions/swagger400"
		  },
		  "401": {
			"$ref": "#/definitions/swagger401"
		  },
		  "403": {
			"$ref": "#/definitions/swagger403"
		  },
		  "404": {
			"$ref": "#/definitions/swagger404"
		  },
		  "405": {
			"$ref": "#/definitions/swagger405"
		  },
		  "406": {
			"$ref": "#/definitions/swagger406"
		  },
		  "409": {
			"$ref": "#/definitions/swagger409"
		  },
		  "415": {
			"$ref": "#/definitions/swagger415"
		  },
		  "500": {
			"$ref": "#/definitions/swagger500"
		  },
		  "502": {
			"$ref": "#/definitions/swagger502"
		  }
		}
	  },
	  "incidentsPropertiesPut": {
		"items": {
		  "$ref": "#/definitions/incidentsPropertiesPutObject"
		},
		"type": "array"
	  },
	  "security": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "10000"
		  }
		},
		"title": "security",
		"type": "object",
		"x-has-customfields": false
	  },
	  "swaggerproperties": {
		"x-has-customfields": false,
		"type": "object",
		"title": "properties",
		"properties": {
		  "definition-property": {
			"$ref": "#/definitions/swaggerdefinition-property"
		  }
		}
	  },
	  "operations": {
		"properties": {
		  "href": {
			"type": "string"
		  },
		  "iconClass": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "label": {
			"type": "string"
		  },
		  "styleClass": {
			"type": "string"
		  },
		  "title": {
			"type": "string"
		  },
		  "weight": {
			"format": "int64",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "projectsPatch": {
		"properties": {
		  "assigneeType": {
			"enum": [
			  "PROJECT_LEAD",
			  "UNASSIGNED"
			],
			"type": "string"
		  },
		  "avatarId": {
			"format": "int64",
			"type": "integer"
		  },
		  "categoryId": {
			"format": "int64",
			"type": "integer"
		  },
		  "description": {
			"type": "string"
		  },
		  "issueSecurityScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "key": {
			"type": "string"
		  },
		  "lead": {
			"type": "string"
		  },
		  "name": {
			"type": "string"
		  },
		  "notificationScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "permissionScheme": {
			"format": "int64",
			"type": "integer"
		  },
		  "projectTemplateKey": {
			"type": "string"
		  },
		  "projectTypeKey": {
			"type": "string"
		  },
		  "url": {
			"type": "string"
		  }
		},
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "project",
		"type": "object"
	  },
	  "groupsListObject": {
		"properties": {
		  "html": {
			"type": "string",
			"x-samplevalue": "administrators"
		  },
		  "labels": {
			"items": {
			  "$ref": "#/definitions/grouplabels"
			},
			"type": "array"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-samplevalue": "administrators"
		  }
		},
		"title": "groupsListObject",
		"type": "object",
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "group"
	  },
	  "IncidentCommentResponse": {
		"properties": {
		  "comments": {
			"items": {
			  "$ref": "#/definitions/Comments"
			},
			"type": "array"
		  },
		  "maxResults": {
			"format": "int32",
			"type": "integer"
		  },
		  "startAt": {
			"format": "int32",
			"type": "integer"
		  },
		  "total": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "toObject": {
		"properties": {
		  "assignee": {
			"type": "boolean"
		  },
		  "groups": {
			"items": {
			  "$ref": "#/definitions/groupObject"
			},
			"type": "array"
		  },
		  "reporter": {
			"type": "boolean"
		  },
		  "users": {
			"items": {
			  "$ref": "#/definitions/userObject"
			},
			"type": "array"
		  },
		  "voters": {
			"type": "boolean"
		  },
		  "watchers": {
			"type": "boolean"
		  }
		},
		"required": [
		  "groups"
		],
		"type": "object"
	  },
	  "ContactPostResp": {
		"properties": {
		  "accountId": {
			"type": "string"
		  },
		  "active": {
			"type": "boolean"
		  },
		  "applicationRoles": {
			"$ref": "#/definitions/ApplicationRoles"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"description": "The display name for the user.",
			"type": "string",
			"x-readOnly": true
		  },
		  "emailAddress": {
			"type": "string",
			"x-sub-format": "Email"
		  },
		  "expand": {
			"type": "string"
		  },
		  "groups": {
			"$ref": "#/definitions/Groups"
		  },
		  "key": {
			"type": "string"
		  },
		  "locale": {
			"type": "string"
		  },
		  "name": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "timeZone": {
			"type": "string",
			"x-sub-format": "Time Zone"
		  },
		  "username": {
			"type": "string",
			"x-sub-format": "Username"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-vendor-objectname": "user",
		"type": "object"
	  },
	  "value": {
		"properties": {},
		"title": "value",
		"x-has-customfields": true,
		"type": "object"
	  },
	  "incidentsWorklogsPostReqAuthorAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "24x24": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "32x32": {
			"type": "string",
			"x-samplevalue": "<string>"
		  },
		  "48x48": {
			"type": "string",
			"x-samplevalue": "<string>"
		  }
		},
		"title": "avatarUrls",
		"type": "object"
	  },
	  "incidentsTransitionsPostReqTransition": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "5"
		  }
		},
		"title": "transition",
		"type": "object"
	  },
	  "incidentsTransitionsPostReqHistoryMetadataGenerator": {
		"properties": {
		  "id": {
			"type": "string",
			"x-samplevalue": "mysystem-1"
		  },
		  "type": {
			"type": "string",
			"x-samplevalue": "mysystem-application"
		  }
		},
		"title": "generator",
		"type": "object"
	  },
	  "grouplabels": {
		"properties": {
		  "text": {
			"type": "string",
			"x-samplevalue": "Admin"
		  },
		  "title": {
			"type": "string",
			"x-samplevalue": "Users added to this group will be given administrative access"
		  },
		  "type": {
			"enum": [
			  "ADMIN",
			  "SINGLE",
			  "MULTIPLE"
			],
			"type": "string",
			"x-samplevalue": "ADMIN"
		  }
		},
		"title": "grouplabels",
		"x-has-customfields": false,
		"type": "object"
	  },
	  "Comments": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/Author"
		  },
		  "body": {
			"type": "string",
			"x-samplevalue": "Body Example"
		  },
		  "created": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2018-01-31T02:06:47.917-0700",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  },
		  "id": {
			"type": "string",
			"x-samplevalue": "26633",
			"x-readOnly": true
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/issue/31174/comment/26633",
			"x-sub-format": "URL"
		  },
		  "updateAuthor": {
			"$ref": "#/definitions/Author"
		  },
		  "updated": {
			"format": "date-time",
			"type": "string",
			"x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
			"x-samplevalue": "2018-01-31T02:06:28.739-0700",
			"x-sub-format": "Date Time - ISO 8601 +Offset"
		  }
		},
		"title": "Comments",
		"x-has-customfields": false,
		"x-primary-key": [
		  "id"
		],
		"x-vendor-objectname": "Comment",
		"type": "object"
	  },
	  "IssueType": {
		"properties": {
		  "avatarId": {
			"format": "int32",
			"type": "integer"
		  },
		  "description": {
			"type": "string"
		  },
		  "iconUrl": {
			"type": "string"
		  },
		  "id": {
			"type": "string"
		  },
		  "name": {
			"enum": [
			  "Bug",
			  "Story",
			  "Task",
			  "Sub-task",
			  "New Feature",
			  "Improvement",
			  "Epic"
			],
			"type": "string",
			"x-sub-format": "Enum"
		  },
		  "self": {
			"type": "string"
		  },
		  "subtask": {
			"type": "boolean"
		  }
		},
		"type": "object"
	  },
	  "incidentsPropertiesGetById": {
		"properties": {
		  "key": {
			"type": "string"
		  },
		  "value": {
			"$ref": "#/definitions/value"
		  }
		},
		"title": "incidentsPropertiesGetById",
		"x-has-customfields": false,
		"x-primary-key": [
		  "key"
		],
		"x-vendor-objectname": "priorities",
		"type": "object"
	  },
	  "groups": {
		"properties": {
		  "isLast": {
			"type": "boolean",
			"x-samplevalue": true
		  },
		  "maxResults": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 50
		  },
		  "nextPage": {
			"type": "string"
		  },
		  "self": {
			"type": "string",
			"x-samplevalue": "https://cloud-elements-dev.atlassian.net/rest/api/2/group/member?includeInactiveUsers=false&maxResults=50&groupname=administrators&startAt=0"
		  },
		  "startAt": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 0
		  },
		  "total": {
			"format": "int32",
			"type": "integer",
			"x-samplevalue": 3
		  },
		  "values": {
			"items": {
			  "$ref": "#/definitions/groupvalues"
			},
			"type": "array"
		  }
		},
		"title": "groups",
		"x-has-customfields": false,
		"x-vendor-objectname": "group",
		"type": "object"
	  },
	  "incidentNotif": {
		"description": "Sends a notification (email) to the list or recipients defined in the request.",
		"properties": {
		  "htmlBody": {
			"type": "string",
			"x-nullable": true
		  },
		  "restrict": {
			"$ref": "#/definitions/restrictObject"
		  },
		  "subject": {
			"type": "string",
			"x-name": true,
			"x-nullable": true
		  },
		  "textBody": {
			"type": "string",
			"x-nullable": true
		  },
		  "to": {
			"$ref": "#/definitions/toObject"
		  }
		},
		"required": [
		  "to"
		],
		"x-has-customfields": false,
		"x-vendor-objectname": "Notify",
		"type": "object"
	  },
	  "leadAvatarUrls": {
		"properties": {
		  "16x16": {
			"type": "string"
		  },
		  "24x24": {
			"type": "string"
		  },
		  "32x32": {
			"type": "string"
		  },
		  "48x48": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "bulkDownloadRequestDocsHubDetails": {
		"properties": {
		  "instanceId": {
			"type": "string",
			"x-samplevalue": "1234"
		  },
		  "path": {
			"type": "string",
			"x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
		  }
		},
		"title": "docsHubDetails",
		"type": "object"
	  },
	  "Contact": {
		"properties": {
		  "accountId": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-operators": [
			  "="
			]
		  },
		  "active": {
			"type": "boolean"
		  },
		  "avatarUrls": {
			"$ref": "#/definitions/avatarUrl"
		  },
		  "displayName": {
			"description": "The display name for the user.",
			"type": "string",
			"x-readOnly": true,
			"x-searchable": true,
			"x-searchable-names": [
			  "query"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "emailAddress": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-names": [
			  "query"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true,
			"x-sub-format": "Email"
		  },
		  "key": {
			"type": "string",
			"x-readOnly": true,
			"x-searchable": true,
			"x-searchable-names": [
			  "query"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "locale": {
			"type": "string"
		  },
		  "name": {
			"type": "string",
			"x-name": true,
			"x-searchable": true,
			"x-searchable-names": [
			  "query"
			],
			"x-searchable-operators": [
			  "=",
			  "LIKE"
			],
			"x-searchable-required": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  },
		  "timeZone": {
			"type": "string",
			"x-sub-format": "Time Zone"
		  }
		},
		"x-has-customfields": false,
		"x-primary-key": [
		  "name"
		],
		"x-searchable": true,
		"x-vendor-objectname": "user",
		"x-where": [
		  "query",
		  "accountId"
		],
		"type": "object"
	  },
	  "groupObject": {
		"properties": {
		  "name": {
			"type": "string",
			"x-name": true,
			"x-reference-objectname": "group"
		  },
		  "self": {
			"type": "string",
			"x-nullable": true,
			"x-sub-format": "URL"
		  }
		},
		"required": [
		  "name"
		],
		"type": "object"
	  },
	  "attachmentsMetadata": {
		"properties": {
		  "author": {
			"$ref": "#/definitions/author"
		  },
		  "content": {
			"type": "string"
		  },
		  "created": {
			"type": "string"
		  },
		  "filename": {
			"type": "string"
		  },
		  "id": {
			"format": "int32",
			"type": "integer"
		  },
		  "mimeType": {
			"type": "string"
		  },
		  "self": {
			"type": "string"
		  },
		  "size": {
			"format": "int32",
			"type": "integer"
		  }
		},
		"type": "object"
	  },
	  "CreateIncidentComponents": {
		"properties": {
		  "id": {
			"type": "string",
			"x-conditionally-required-description": "id is required when name field is not present."
		  },
		  "name": {
			"type": "string",
			"x-conditionally-required-description": "name is required when id field is not present."
		  },
		  "self": {
			"type": "string"
		  }
		},
		"type": "object"
	  },
	  "userObject": {
		"properties": {
		  "active": {
			"type": "boolean"
		  },
		  "name": {
			"type": "string",
			"x-reference-objectname": "user",
			"x-sub-format": "username"
		  }
		},
		"type": "object"
	  },
	  "Incident": {
		"properties": {
		  "expand": {
			"type": "string"
		  },
		  "fields": {
			"$ref": "#/definitions/Fields"
		  },
		  "id": {
			"type": "string",
			"x-searchable": true,
			"x-searchable-operators": [
			  "=",
			  "!=",
			  ">=",
			  "<=",
			  ">",
			  "<"
			],
			"x-readOnly": true
		  },
		  "key": {
			"type": "string",
			"x-name": true
		  },
		  "self": {
			"type": "string",
			"x-sub-format": "URL"
		  }
		},
		"x-has-customfields": true,
		"x-primary-key": [
		  "id"
		],
		"x-searchable": true,
		"x-vendor-objectname": "issue",
		"type": "object"
	  }
	},
	"swagger": "2.0",
	"info": {
	  "x-element-name": "JIRA",
	  "x-element-hub": "helpdesk",
	  "x-element-key": "jira",
	  "title": "jira",
	  "x-element-id": 1,
	  "version": "api-v2",
	  "description": "Add a Jira Instance to connect your existing Jira account to the Help Desk Hub, allowing you to manage your incidents, priorities, statuses, users, etc. across multiple Help Desk Elements. You will need your Jira account information to add an instance."
	},
	"tags": [
	  {
		"name": "Agents"
	  },
	  {
		"name": "Attachments"
	  },
	  {
		"name": "Bulk"
	  },
	  {
		"name": "Contacts"
	  },
	  {
		"name": "Fields"
	  },
	  {
		"name": "Groups"
	  },
	  {
		"name": "Incident Types"
	  },
	  {
		"name": "Incidents"
	  },
	  {
		"name": "Issuesecurity Schemes"
	  },
	  {
		"name": "Notification Schemes"
	  },
	  {
		"name": "Object Name"
	  },
	  {
		"name": "Objects"
	  },
	  {
		"name": "Permission Schemes"
	  },
	  {
		"name": "Ping"
	  },
	  {
		"name": "Priorities"
	  },
	  {
		"name": "Project Categories"
	  },
	  {
		"name": "Projects"
	  },
	  {
		"name": "Statuses"
	  },
	  {
		"name": "Worklogs"
	  }
	],
	"x-sap-api-type": "REST",
	"x-sap-shortText": "Plan, track, and manage your agile and software development projects",
	"externalDocs": {
	  "description": "SAP Open Connectors Documentation",
	  "url": "https://help.openconnectors.ext.hana.ondemand.com/home/jira"
	}
  }